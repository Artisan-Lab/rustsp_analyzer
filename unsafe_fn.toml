[unsafe_fn."https://doc.rust-lang.org/core/alloc/trait.GlobalAlloc.html#tymethod.alloc"]
row = 3
layout.EST = ["`layout` has non-zero size."]
retval.Untyped = ["The allocated block of memory may or may not be initialized."]
retval.Freed = ["Returning a null pointer indicates that either memory is exhausted."]

[unsafe_fn."https://doc.rust-lang.org/core/alloc/trait.GlobalAlloc.html#tymethod.dealloc"]
row = 4
ptr.Allocated = ["`ptr` must denote a block of memory currently allocated via this allocator."]
layout.ConsistantLayout = ["`layout` must be the same layout that was used to allocate that block of memory."]

[unsafe_fn."https://doc.rust-lang.org/core/alloc/trait.GlobalAlloc.html#method.alloc_zeroed"]
row = 5
layout.EST = ["`layout` has non-zero size."]
retval.Untyped = ["The allocated block of memory is guaranteed to be initialized but may be untyped."]
retval.Freed = ["Returning a null pointer indicates that either memory is exhausted."]

[unsafe_fn."https://doc.rust-lang.org/core/alloc/trait.GlobalAlloc.html#method.realloc"]
row = 6
ptr.Allocated = ["`ptr` must be currently allocated via this allocator."]
ptr.Freed = ["If this returns a non-null pointer, then ownership of the memory block referenced by `ptr` has been transferred to this allocator."]
layout.ConsistantLayout = ["`layout` must be the same layout that was used to allocate that block of memory."]
layout.EST = ["`layout` has non-zero size."]
new_size.ConstBound = [
    "`new_size` must be greater than zero",
    "`new_size`, when rounded up to the nearest multiple of layout.align(), must not overflow `isize::MAX`."
]
retval.Untyped = ["The allocated block of memory may or may not be initialized."]
retval.Freed = ["Returning a null pointer indicates that either memory is exhausted."]

[unsafe_fn."https://doc.rust-lang.org/core/alloc/struct.Layout.html#method.for_value_raw"]
row = 7
t.ConstBound = [
    "If the unsized tail of `T` is a slice, then the length of the slice tail must be an initialized integer, and the size of the entire value (dynamic tail length + statically sized prefix) must fit in `isize`.",
    "If the unsized tail of `T` is a trait object, then the vtable part of the pointer must point to a valid vtable for the type `T` acquired by an unsizing coercion, and the size of the entire value (dynamic tail length + statically sized prefix) must fit in `isize`."
]
t.EST = [
    "If the unsized tail of `T` is a slice, then the length of the slice tail must be an initialized integer, and the size of the entire value (dynamic tail length + statically sized prefix) must fit in `isize`.",
    "If the unsized tail of `T` is a trait object, then the vtable part of the pointer must point to a valid vtable for the type `T` acquired by an unsizing coercion, and the size of the entire value (dynamic tail length + statically sized prefix) must fit in `isize`."
]

[unsafe_fn."https://doc.rust-lang.org/core/alloc/struct.Layout.html#method.from_size_align_unchecked"]
row = 8
align.ConstBound = [
    "`align` must not be zero.",
    "`align` must be a power of two."
]
size.ConstBound = ["`size`, when rounded up to the nearest multiple of `align`, must not overflow `isize::MAX`."]

[unsafe_fn."https://doc.rust-lang.org/core/alloc/trait.Allocator.html#tymethod.deallocate"]
row = 9
ptr.Allocated = ["`ptr` must denote a block of memory currently allocated via this allocator."]
layout.ConsistantLayout = ["`layout` must fit that block of memory."]

[unsafe_fn."https://doc.rust-lang.org/core/alloc/trait.Allocator.html#method.grow"]
row = 10
ptr.Allocated = ["`ptr` must denote a block of memory currently allocated via this allocator."]
ptr.Freed = ["If this returns `Ok`, then ownership of the memory block referenced by `ptr` has been transferred to this allocator. "]
old_layout.ConsistantLayout = ["`old_layout` must fit that block of memory."]
new_layout.RelativeBound = ["`new_layout.size()` must be greater than or equal to `old_layout.size()`."]
retval.Untyped = ["The allocated block of memory may or may not be initialized."]

[unsafe_fn."https://doc.rust-lang.org/core/alloc/trait.Allocator.html#method.grow_zeroed"]
row = 11
ptr.Allocated = ["`ptr` must denote a block of memory currently allocated via this allocator."]
ptr.Freed = ["If this returns `Ok`, then ownership of the memory block referenced by `ptr` has been transferred to this allocator. "]
old_layout.ConsistantLayout = ["`old_layout` must fit that block of memory."]
new_layout.RelativeBound = ["`new_layout.size()` must be greater than or equal to `old_layout.size()`."]
retval.Untyped = ["The allocated block of memory is guaranteed to be initialized but may be untyped."]

[unsafe_fn."https://doc.rust-lang.org/core/alloc/trait.Allocator.html#method.shrink"]
row = 12
ptr.Allocated = ["`ptr` must denote a block of memory currently allocated via this allocator."]
ptr.Freed = ["If this returns `Ok`, then ownership of the memory block referenced by `ptr` has been transferred to this allocator. "]
old_layout.ConsistantLayout = ["`old_layout` must fit that block of memory."]
new_layout.RelativeBound = ["`new_layout.size()` must be smaller than or equal to `old_layout.size()`."]

[unsafe_fn."https://doc.rust-lang.org/core/array/struct.IntoIter.html#method.new_unchecked"]
row = 13
buffer.Initialized = ["The `buffer[initialized]` elements must all be initialized."]
initialized.ConstBound = ["The range must be in-bounds for the buffer, with `initialized.end <= N`."]
initialized.RelativeBound = ["The range must be canonical, with `initialized.start` <= `initialized.end`."]

[unsafe_fn."https://doc.rust-lang.org/core/char/fn.from_u32_unchecked.html"]
row = 14
i.Encoding = ["Not all valid `u32`s are valid `char`s, it may construct invalid `char` values."]

[unsafe_fn."https://doc.rust-lang.org/core/primitive.char.html#method.from_u32_unchecked"]
row = 15
i.Encoding = ["Not all valid `u32`s are valid `char`s, it may construct invalid `char` values."]

[unsafe_fn."https://doc.rust-lang.org/core/convert/trait.FloatToInt.html"]
row = 16
self.ConstBound = [
    "The value must not be `NaN`.",
    "The value must not be infinite.",
    "The value must be representable in the return type `Int`, after truncating off its fractional part."
]

[unsafe_fn."https://doc.rust-lang.org/core/ffi/struct.CStr.html#method.from_ptr"]
row = 17
ptr.Encoding = ["The memory pointed to by `ptr` must contain a valid nul terminator at the end of the string."]
ptr.ConstBound = ["The nul terminator must be within `isize::MAX` from `ptr`."]
ptr.Allocated = ["`ptr` must be non-null even for a zero-length cstr."]
ptr.Dereferencable = ["The entire memory range of this `CStr` must be contained within a single allocated object!"]
retval.AliasingMutating = ["The memory referenced by the returned `CStr` must not be mutated for the duration of lifetime `'a`."]
retval.Outliving = ["The lifetime for the returned slice is inferred from its usage. To prevent accidental misuse, it's suggested to tie the lifetime to whichever source lifetime is safe in the context."]

[unsafe_fn."https://doc.rust-lang.org/core/ffi/struct.CStr.html#method.from_bytes_with_nul_unchecked"]
row = 18
bytes.Encoding = ["The provided slice must be nul-terminated and not contain any interior nul bytes."]

[unsafe_fn."https://doc.rust-lang.org/core/iter/trait.Step.html#method.forward_unchecked"]
row = 21
start.ConstBound = ["`start` + `count` may overflow the range of values supported by `Self`."]

[unsafe_fn."https://doc.rust-lang.org/core/iter/trait.Step.html#method.backward_unchecked"]
row = 22
start.ConstBound = ["`start` - `count` may overflow the range of values supported by `Self`."]

[unsafe_fn."https://doc.rust-lang.org/core/primitive.char.html#method.forward_unchecked"]
row = 23
start.ConstBound = ["`start` + `count` may overflow the range of values supported by `char::MAX`."]

[unsafe_fn."https://doc.rust-lang.org/core/primitive.i8.html#method.forward_unchecked"]
row = 23
start.ConstBound = ["`start` + `count` may overflow the range of values supported by `i8::MAX`."]

[unsafe_fn."https://doc.rust-lang.org/core/primitive.i16.html#method.forward_unchecked"]
row = 23
start.ConstBound = ["`start` + `count` may overflow the range of values supported by `i16::MAX`."]

[unsafe_fn."https://doc.rust-lang.org/core/primitive.i32.html#method.forward_unchecked"]
row = 23
start.ConstBound = ["`start` + `count` may overflow the range of values supported by `i32::MAX`."]

[unsafe_fn."https://doc.rust-lang.org/core/primitive.i64.html#method.forward_unchecked"]
row = 23
start.ConstBound = ["`start` + `count` may overflow the range of values supported by `i64::MAX`."]

[unsafe_fn."https://doc.rust-lang.org/core/primitive.i128.html#method.forward_unchecked"]
row = 23
start.ConstBound = ["`start` + `count` may overflow the range of values supported by `i128::MAX`."]

[unsafe_fn."https://doc.rust-lang.org/core/primitive.u8.html#method.forward_unchecked"]
row = 23
start.ConstBound = ["`start` + `count` may overflow the range of values supported by `u8::MAX`."]

[unsafe_fn."https://doc.rust-lang.org/core/primitive.u16.html#method.forward_unchecked"]
row = 23
start.ConstBound = ["`start` + `count` may overflow the range of values supported by `u16::MAX`."]

[unsafe_fn."https://doc.rust-lang.org/core/primitive.u32.html#method.forward_unchecked"]
row = 23
start.ConstBound = ["`start` + `count` may overflow the range of values supported by `u16::MAX`."]

[unsafe_fn."https://doc.rust-lang.org/core/primitive.u64.html#method.forward_unchecked"]
row = 23
start.ConstBound = ["`start` + `count` may overflow the range of values supported by `u64::MAX`."]

[unsafe_fn."https://doc.rust-lang.org/core/primitive.u128.html#method.forward_unchecked"]
row = 23
start.ConstBound = ["`start` + `count` may overflow the range of values supported by `u128::MAX`."]

[unsafe_fn."https://doc.rust-lang.org/core/primitive.isize.html#method.forward_unchecked"]
row = 23
start.ConstBound = ["`start` + `count` may overflow the range of values supported by `isize::MAX`."]

[unsafe_fn."https://doc.rust-lang.org/core/primitive.usize.html#method.forward_unchecked"]
row = 23
start.ConstBound = ["`start` + `count` may overflow the range of values supported by `usize::MAX`."]

[unsafe_fn."https://doc.rust-lang.org/core/primitive.char.html#method.backward_unchecked"]
row = 24
start.ConstBound = ["`start` - `count` may overflow the range of values supported by `char::MIN`."]

[unsafe_fn."https://doc.rust-lang.org/core/primitive.i8.html#method.backward_unchecked"]
row = 24
start.ConstBound = ["`start` - `count` may overflow the range of values supported by `i8::MIN`."]

[unsafe_fn."https://doc.rust-lang.org/core/primitive.i16.html#method.backward_unchecked"]
row = 24
start.ConstBound = ["`start` - `count` may overflow the range of values supported by `i16::MIN`."]

[unsafe_fn."https://doc.rust-lang.org/core/primitive.i32.html#method.backward_unchecked"]
row = 24
start.ConstBound = ["`start` - `count` may overflow the range of values supported by `i32::MIN`."]

[unsafe_fn."https://doc.rust-lang.org/core/primitive.i64.html#method.backward_unchecked"]
row = 24
start.ConstBound = ["`start` - `count` may overflow the range of values supported by `i64::MIN`."]

[unsafe_fn."https://doc.rust-lang.org/core/primitive.i128.html#method.backward_unchecked"]
row = 24
start.ConstBound = ["`start` - `count` may overflow the range of values supported by `i128::MIN`."]

[unsafe_fn."https://doc.rust-lang.org/core/primitive.u8.html#method.backward_unchecked"]
row = 24
start.ConstBound = ["`start` - `count` may overflow the range of values supported by `u8::MIN`."]

[unsafe_fn."https://doc.rust-lang.org/core/primitive.u16.html#method.backward_unchecked"]
row = 24
start.ConstBound = ["`start` - `count` may overflow the range of values supported by `u16::MIN`."]

[unsafe_fn."https://doc.rust-lang.org/core/primitive.u32.html#method.backward_unchecked"]
row = 24
start.ConstBound = ["`start` - `count` may overflow the range of values supported by `u32::MIN`."]

[unsafe_fn."https://doc.rust-lang.org/core/primitive.u64.html#method.backward_unchecked"]
row = 24
start.ConstBound = ["`start` - `count` may overflow the range of values supported by `u64::MIN`."]

[unsafe_fn."https://doc.rust-lang.org/core/primitive.u128.html#method.backward_unchecked"]
row = 24
start.ConstBound = ["`start` - `count` may overflow the range of values supported by `u128::MIN`."]

[unsafe_fn."https://doc.rust-lang.org/core/primitive.isize.html#method.backward_unchecked"]
row = 24
start.ConstBound = ["`start` - `count` may overflow the range of values supported by `isize::MIN`."]

[unsafe_fn."https://doc.rust-lang.org/core/primitive.usize.html#method.backward_unchecked"]
row = 24
start.ConstBound = ["`start` - `count` may overflow the range of values supported by `usize::MIN`."]

[unsafe_fn."https://doc.rust-lang.org/core/mem/struct.ManuallyDrop.html#method.take"]
row = 25
retval.DualOwner = [
    "This function semantically moves out the contained value without preventing further usage, leaving the state of this container unchanged. It is your responsibility to ensure that this `ManuallyDrop` is not used again."
]

[unsafe_fn."https://doc.rust-lang.org/core/mem/struct.ManuallyDrop.html#method.drop"]
row = 26
slot.Freed = [
    "This function runs the destructor of the contained value. The zombie value should not be exposed to safe code after been dropped, and this function should not be called more than once."
]

[unsafe_fn."https://doc.rust-lang.org/core/mem/union.MaybeUninit.html#method.assume_init"]
row = 27
self.Initialized = ["It is up to the caller to guarantee that the `MaybeUninit<T>` really is in an initialized state."]

[unsafe_fn."https://doc.rust-lang.org/core/mem/union.MaybeUninit.html#method.assume_init_read"]
row = 28
self.Initialized = ["It is up to the caller to guarantee that the `MaybeUninit<T>` really is in an initialized state."]
retval.DualOwner = ["This function creates a bitwise copy of the contents, regardless whether the contained type implements the `Copy` trait or not. When using multiple copies of the data (by calling `assume_init_read` multiple times, or first calling `assume_init_read` and then `assume_init`), it is your responsibility to ensure that data may indeed be duplicated."]

[unsafe_fn."https://doc.rust-lang.org/core/mem/union.MaybeUninit.html#method.assume_init_drop"]
row = 29
self.Initialized = ["It is up to the caller to guarantee that the `MaybeUninit<T>` really is in an initialized state."]
self.ConsistantLayout = ["All additional invariants of the type `T` must be satisfied, as the `Drop` implementation of `T` (or its members) may rely on this."]
self.Freed = ["Drops the contained value in place."]

[unsafe_fn."https://doc.rust-lang.org/core/mem/union.MaybeUninit.html#method.assume_init_ref"]
row = 30
self.Initialized = ["It is up to the caller to guarantee that the `MaybeUninit<T>` really is in an initialized state."]

[unsafe_fn."https://doc.rust-lang.org/core/mem/union.MaybeUninit.html#method.assume_init_mut"]
row = 31
self.Initialized = ["It is up to the caller to guarantee that the `MaybeUninit<T>` really is in an initialized state."]

[unsafe_fn."https://doc.rust-lang.org/core/mem/union.MaybeUninit.html#method.array_assume_init"]
row = 32
array.Initialized = ["It is up to the caller to guarantee that all elements of the array are in an initialized state."]

[unsafe_fn."https://doc.rust-lang.org/core/mem/union.MaybeUninit.html#method.slice_assume_init_ref"]
row = 33
slice.Initialized = ["It is up to the caller to guarantee that the `MaybeUninit<T>` elements really are in an initialized state."]

[unsafe_fn."https://doc.rust-lang.org/core/mem/union.MaybeUninit.html#method.slice_assume_init_mut"]
row = 34
slice.Initialized = ["It is up to the caller to guarantee that the `MaybeUninit<T>` elements really are in an initialized state."]

[unsafe_fn."https://doc.rust-lang.org/core/mem/fn.size_of_val_raw.html"]
row = 35
val.ConstBound = [
    "If the unsized tail of `T` is a slice, then the length of the slice tail must be an initialized integer, and the size of the entire value (dynamic tail length + statically sized prefix) must fit in `isize`.",
    "If the unsized tail of `T` is a trait object, then the vtable part of the pointer must point to a valid vtable for the type `T` acquired by an unsizing coercion, and the size of the entire value (dynamic tail length + statically sized prefix) must fit in `isize`."
]
val.EST = [
    "If the unsized tail of `T` is a slice, then the length of the slice tail must be an initialized integer, and the size of the entire value (dynamic tail length + statically sized prefix) must fit in `isize`.",
    "If the unsized tail of `T` is a trait object, then the vtable part of the pointer must point to a valid vtable for the type `T` acquired by an unsizing coercion, and the size of the entire value (dynamic tail length + statically sized prefix) must fit in `isize`."
]

[unsafe_fn."https://doc.rust-lang.org/core/mem/fn.align_of_val_raw.html"]
row = 36
val.ConstBound = [
    "If the unsized tail of `T` is a slice, then the length of the slice tail must be an initialized integer, and the size of the entire value (dynamic tail length + statically sized prefix) must fit in `isize`.",
    "If the unsized tail of `T` is a trait object, then the vtable part of the pointer must point to a valid vtable for the type `T` acquired by an unsizing coercion, and the size of the entire value (dynamic tail length + statically sized prefix) must fit in `isize`."
]
val.EST = [
    "If the unsized tail of `T` is a slice, then the length of the slice tail must be an initialized integer, and the size of the entire value (dynamic tail length + statically sized prefix) must fit in `isize`.",
    "If the unsized tail of `T` is a trait object, then the vtable part of the pointer must point to a valid vtable for the type `T` acquired by an unsizing coercion, and the size of the entire value (dynamic tail length + statically sized prefix) must fit in `isize`."
]

[unsafe_fn."https://doc.rust-lang.org/core/mem/fn.zeroed.html"]
row = 37
retval.Untyped = ["The padding byte is not necessarily zeroed. There is no guarantee that an all-zero byte-pattern represents a valid value of some type `T`."]

[unsafe_fn."https://doc.rust-lang.org/core/mem/fn.transmute.html"]
row = 38
RelativeBound = [""]
Initialized = [""]
Aligned = [""]
ConsistantLayout = [""]
AliasingMutating = [""]
Outliving = [""]

[unsafe_fn."https://doc.rust-lang.org/core/mem/fn.transmute_copy.html"]
row = 39
RelativeBound = [""]
Initialized = [""]
Aligned = [""]
ConsistantLayout = [""]
DualOwner = [""]
AliasingMutating = [""]
Outliving = [""]

[unsafe_fn."https://doc.rust-lang.org/core/primitive.f32.html#method.to_int_unchecked"]
row = 40
self.ConstBound = [
    "The value must not be `NaN`.",
    "The value must not be infinite.",
    "The value must be representable in the return type `Int`, after truncating off its fractional part."
]

[unsafe_fn."https://doc.rust-lang.org/core/primitive.f64.html#method.to_int_unchecked"]
row = 41
self.ConstBound = [
    "The value must not be `NaN`.",
    "The value must not be infinite.",
    "The value must be representable in the return type `Int`, after truncating off its fractional part."
]

[unsafe_fn."https://doc.rust-lang.org/core/primitive.i8.html#method.unchecked_add"]
row = 42
self.ConstBound = ["This results in undefined behavior when `self + rhs > i8::MAX` or `self + rhs < i8::MIN`."]

[unsafe_fn."https://doc.rust-lang.org/core/primitive.i16.html#method.unchecked_add"]
row = 42
self.ConstBound = ["This results in undefined behavior when `self + rhs > i16::MAX` or `self + rhs < i16::MIN`."]

[unsafe_fn."https://doc.rust-lang.org/core/primitive.i32.html#method.unchecked_add"]
row = 42
self.ConstBound = ["This results in undefined behavior when `self + rhs > i32::MAX` or `self + rhs < i32::MIN`."]

[unsafe_fn."https://doc.rust-lang.org/core/primitive.i64.html#method.unchecked_add"]
row = 42
self.ConstBound = ["This results in undefined behavior when `self + rhs > i64::MAX` or `self + rhs < i64::MIN`."]

[unsafe_fn."https://doc.rust-lang.org/core/primitive.i128.html#method.unchecked_add"]
row = 42
self.ConstBound = ["This results in undefined behavior when `self + rhs > i128::MAX` or `self + rhs < i128::MIN`."]

[unsafe_fn."https://doc.rust-lang.org/core/primitive.u8.html#method.unchecked_add"]
row = 42
self.ConstBound = ["This results in undefined behavior when `self + rhs > u8::MAX` or `self + rhs < u8::MIN`."]

[unsafe_fn."https://doc.rust-lang.org/core/primitive.u16.html#method.unchecked_add"]
row = 42
self.ConstBound = ["This results in undefined behavior when `self + rhs > u16::MAX` or `self + rhs < u16::MIN`."]

[unsafe_fn."https://doc.rust-lang.org/core/primitive.u32.html#method.unchecked_add"]
row = 42
self.ConstBound = ["This results in undefined behavior when `self + rhs > u32::MAX` or `self + rhs < u32::MIN`."]

[unsafe_fn."https://doc.rust-lang.org/core/primitive.u64.html#method.unchecked_add"]
row = 42
self.ConstBound = ["This results in undefined behavior when `self + rhs > u64::MAX` or `self + rhs < u64::MIN`."]

[unsafe_fn."https://doc.rust-lang.org/core/primitive.u128.html#method.unchecked_add"]
row = 42
self.ConstBound = ["This results in undefined behavior when `self + rhs > u128::MAX` or `self + rhs < u128::MIN`."]

[unsafe_fn."https://doc.rust-lang.org/core/primitive.isize.html#method.unchecked_add"]
row = 42
self.ConstBound = ["This results in undefined behavior when `self + rhs > isize::MAX` or `self + rhs < isize::MIN`."]

[unsafe_fn."https://doc.rust-lang.org/core/primitive.usize.html#method.unchecked_add"]
row = 42
self.ConstBound = ["This results in undefined behavior when `self + rhs > usize::MAX` or `self + rhs < usize::MIN`."]

[unsafe_fn."https://doc.rust-lang.org/core/primitive.i8.html#method.unchecked_sub"]
row = 43
self.ConstBound = ["This results in undefined behavior when `self - rhs > i8::MAX` or `self - rhs < i8::MIN`."]

[unsafe_fn."https://doc.rust-lang.org/core/primitive.i16.html#method.unchecked_sub"]
row = 43
self.ConstBound = ["This results in undefined behavior when `self - rhs > i16::MAX` or `self - rhs < i16::MIN`."]

[unsafe_fn."https://doc.rust-lang.org/core/primitive.i32.html#method.unchecked_sub"]
row = 43
self.ConstBound = ["This results in undefined behavior when `self - rhs > i32::MAX` or `self - rhs < i32::MIN`."]

[unsafe_fn."https://doc.rust-lang.org/core/primitive.i64.html#method.unchecked_sub"]
row = 43
self.ConstBound = ["This results in undefined behavior when `self - rhs > i64::MAX` or `self - rhs < i64::MIN`."]

[unsafe_fn."https://doc.rust-lang.org/core/primitive.i128.html#method.unchecked_sub"]
row = 43
self.ConstBound = ["This results in undefined behavior when `self - rhs > i128::MAX` or `self - rhs < i128::MIN`."]

[unsafe_fn."https://doc.rust-lang.org/core/primitive.u8.html#method.unchecked_sub"]
row = 43
self.ConstBound = ["This results in undefined behavior when `self - rhs > u8::MAX` or `self - rhs < u8::MIN`."]

[unsafe_fn."https://doc.rust-lang.org/core/primitive.u16.html#method.unchecked_sub"]
row = 43
self.ConstBound = ["This results in undefined behavior when `self - rhs > u16::MAX` or `self - rhs < u16::MIN`."]

[unsafe_fn."https://doc.rust-lang.org/core/primitive.u32.html#method.unchecked_sub"]
row = 43
self.ConstBound = ["This results in undefined behavior when `self - rhs > u32::MAX` or `self - rhs < u32::MIN`."]

[unsafe_fn."https://doc.rust-lang.org/core/primitive.u64.html#method.unchecked_sub"]
row = 43
self.ConstBound = ["This results in undefined behavior when `self - rhs > u64::MAX` or `self - rhs < u64::MIN`."]

[unsafe_fn."https://doc.rust-lang.org/core/primitive.u128.html#method.unchecked_sub"]
row = 43
self.ConstBound = ["This results in undefined behavior when `self - rhs > u128::MAX` or `self - rhs < u128::MIN`."]

[unsafe_fn."https://doc.rust-lang.org/core/primitive.isize.html#method.unchecked_sub"]
row = 43
self.ConstBound = ["This results in undefined behavior when `self - rhs > isize::MAX` or `self - rhs < isize::MIN`."]

[unsafe_fn."https://doc.rust-lang.org/core/primitive.usize.html#method.unchecked_sub"]
row = 43
self.ConstBound = ["This results in undefined behavior when `self - rhs > usize::MAX` or `self - rhs < usize::MIN`."]

[unsafe_fn."https://doc.rust-lang.org/core/primitive.i8.html#method.unchecked_mul"]
row = 44
self.ConstBound = ["This results in undefined behavior when `self * rhs > i8::MAX` or `self * rhs < i8::MIN`."]

[unsafe_fn."https://doc.rust-lang.org/core/primitive.i16.html#method.unchecked_mul"]
row = 44
self.ConstBound = ["This results in undefined behavior when `self * rhs > i16::MAX` or `self * rhs < i16::MIN`."]

[unsafe_fn."https://doc.rust-lang.org/core/primitive.i32.html#method.unchecked_mul"]
row = 44
self.ConstBound = ["This results in undefined behavior when `self * rhs > i32::MAX` or `self * rhs < i32::MIN`."]

[unsafe_fn."https://doc.rust-lang.org/core/primitive.i64.html#method.unchecked_mul"]
row = 44
self.ConstBound = ["This results in undefined behavior when `self * rhs > i64::MAX` or `self * rhs < i64::MIN`."]

[unsafe_fn."https://doc.rust-lang.org/core/primitive.i128.html#method.unchecked_mul"]
row = 44
self.ConstBound = ["This results in undefined behavior when `self * rhs > i128::MAX` or `self * rhs < i128::MIN`."]

[unsafe_fn."https://doc.rust-lang.org/core/primitive.u8.html#method.unchecked_mul"]
row = 44
self.ConstBound = ["This results in undefined behavior when `self * rhs > u8::MAX` or `self * rhs < u8::MIN`."]

[unsafe_fn."https://doc.rust-lang.org/core/primitive.u16.html#method.unchecked_mul"]
row = 44
self.ConstBound = ["This results in undefined behavior when `self * rhs > u16::MAX` or `self * rhs < u16::MIN`."]

[unsafe_fn."https://doc.rust-lang.org/core/primitive.u32.html#method.unchecked_mul"]
row = 44
self.ConstBound = ["This results in undefined behavior when `self * rhs > u32::MAX` or `self * rhs < u32::MIN`."]

[unsafe_fn."https://doc.rust-lang.org/core/primitive.u64.html#method.unchecked_mul"]
row = 44
self.ConstBound = ["This results in undefined behavior when `self * rhs > u64::MAX` or `self * rhs < u64::MIN`."]

[unsafe_fn."https://doc.rust-lang.org/core/primitive.u128.html#method.unchecked_mul"]
row = 44
self.ConstBound = ["This results in undefined behavior when `self * rhs > u128::MAX` or `self * rhs < u128::MIN`."]

[unsafe_fn."https://doc.rust-lang.org/core/primitive.isize.html#method.unchecked_mul"]
row = 44
self.ConstBound = ["This results in undefined behavior when `self * rhs > isize::MAX` or `self * rhs < isize::MIN`."]

[unsafe_fn."https://doc.rust-lang.org/core/primitive.usize.html#method.unchecked_mul"]
row = 44
self.ConstBound = ["This results in undefined behavior when `self * rhs > usize::MAX` or `self * rhs < usize::MIN`."]

[unsafe_fn."https://doc.rust-lang.org/core/primitive.i8.html#method.unchecked_shl"]
row = 45
self.RelativeBound = ["This results in undefined behavior if `rhs` is larger than or equal to the number of bits in `self`."]

[unsafe_fn."https://doc.rust-lang.org/core/primitive.i16.html#method.unchecked_shl"]
row = 45
self.RelativeBound = ["This results in undefined behavior if `rhs` is larger than or equal to the number of bits in `self`."]

[unsafe_fn."https://doc.rust-lang.org/core/primitive.i32.html#method.unchecked_shl"]
row = 45
self.RelativeBound = ["This results in undefined behavior if `rhs` is larger than or equal to the number of bits in `self`."]

[unsafe_fn."https://doc.rust-lang.org/core/primitive.i64.html#method.unchecked_shl"]
row = 45
self.RelativeBound = ["This results in undefined behavior if `rhs` is larger than or equal to the number of bits in `self`."]

[unsafe_fn."https://doc.rust-lang.org/core/primitive.i128.html#method.unchecked_shl"]
row = 45
self.RelativeBound = ["This results in undefined behavior if `rhs` is larger than or equal to the number of bits in `self`."]

[unsafe_fn."https://doc.rust-lang.org/core/primitive.u8.html#method.unchecked_shl"]
row = 45
self.RelativeBound = ["This results in undefined behavior if `rhs` is larger than or equal to the number of bits in `self`."]

[unsafe_fn."https://doc.rust-lang.org/core/primitive.u16.html#method.unchecked_shl"]
row = 45
self.RelativeBound = ["This results in undefined behavior if `rhs` is larger than or equal to the number of bits in `self`."]

[unsafe_fn."https://doc.rust-lang.org/core/primitive.u32.html#method.unchecked_shl"]
row = 45
self.RelativeBound = ["This results in undefined behavior if `rhs` is larger than or equal to the number of bits in `self`."]

[unsafe_fn."https://doc.rust-lang.org/core/primitive.u64.html#method.unchecked_shl"]
row = 45
self.RelativeBound = ["This results in undefined behavior if `rhs` is larger than or equal to the number of bits in `self`."]

[unsafe_fn."https://doc.rust-lang.org/core/primitive.u128.html#method.unchecked_shl"]
row = 45
self.RelativeBound = ["This results in undefined behavior if `rhs` is larger than or equal to the number of bits in `self`."]

[unsafe_fn."https://doc.rust-lang.org/core/primitive.isize.html#method.unchecked_shl"]
row = 45
self.RelativeBound = ["This results in undefined behavior if `rhs` is larger than or equal to the number of bits in `self`."]

[unsafe_fn."https://doc.rust-lang.org/core/primitive.usize.html#method.unchecked_shl"]
row = 45
self.RelativeBound = ["This results in undefined behavior if `rhs` is larger than or equal to the number of bits in `self`."]

[unsafe_fn."https://doc.rust-lang.org/core/primitive.i8.html#method.unchecked_shr"]
row = 46
self.RelativeBound = ["This results in undefined behavior if `rhs` is larger than or equal to the number of bits in `self`."]

[unsafe_fn."https://doc.rust-lang.org/core/primitive.i16.html#method.unchecked_shr"]
row = 46
self.RelativeBound = ["This results in undefined behavior if `rhs` is larger than or equal to the number of bits in `self`."]

[unsafe_fn."https://doc.rust-lang.org/core/primitive.i32.html#method.unchecked_shr"]
row = 46
self.RelativeBound = ["This results in undefined behavior if `rhs` is larger than or equal to the number of bits in `self`."]

[unsafe_fn."https://doc.rust-lang.org/core/primitive.i64.html#method.unchecked_shr"]
row = 46
self.RelativeBound = ["This results in undefined behavior if `rhs` is larger than or equal to the number of bits in `self`."]

[unsafe_fn."https://doc.rust-lang.org/core/primitive.i128.html#method.unchecked_shr"]
row = 46
self.RelativeBound = ["This results in undefined behavior if `rhs` is larger than or equal to the number of bits in `self`."]

[unsafe_fn."https://doc.rust-lang.org/core/primitive.u8.html#method.unchecked_shr"]
row = 46
self.RelativeBound = ["This results in undefined behavior if `rhs` is larger than or equal to the number of bits in `self`."]

[unsafe_fn."https://doc.rust-lang.org/core/primitive.u16.html#method.unchecked_shr"]
row = 46
self.RelativeBound = ["This results in undefined behavior if `rhs` is larger than or equal to the number of bits in `self`."]

[unsafe_fn."https://doc.rust-lang.org/core/primitive.u32.html#method.unchecked_shr"]
row = 46
self.RelativeBound = ["This results in undefined behavior if `rhs` is larger than or equal to the number of bits in `self`."]

[unsafe_fn."https://doc.rust-lang.org/core/primitive.u64.html#method.unchecked_shr"]
row = 46
self.RelativeBound = ["This results in undefined behavior if `rhs` is larger than or equal to the number of bits in `self`."]

[unsafe_fn."https://doc.rust-lang.org/core/primitive.u128.html#method.unchecked_shr"]
row = 46
self.RelativeBound = ["This results in undefined behavior if `rhs` is larger than or equal to the number of bits in `self`."]

[unsafe_fn."https://doc.rust-lang.org/core/primitive.isize.html#method.unchecked_shr"]
row = 46
self.RelativeBound = ["This results in undefined behavior if `rhs` is larger than or equal to the number of bits in `self`."]

[unsafe_fn."https://doc.rust-lang.org/core/primitive.usize.html#method.unchecked_shr"]
row = 46
self.RelativeBound = ["This results in undefined behavior if `rhs` is larger than or equal to the number of bits in `self`."]

[unsafe_fn."https://doc.rust-lang.org/core/num/struct.NonZeroU8.html#method.new_unchecked"]
row = 47
n.ConstBound = ["The value must not be zero."]

[unsafe_fn."https://doc.rust-lang.org/core/num/struct.NonZeroU16.html#method.new_unchecked"]
row = 47
n.ConstBound = ["The value must not be zero."]

[unsafe_fn."https://doc.rust-lang.org/core/num/struct.NonZeroU32.html#method.new_unchecked"]
row = 47
n.ConstBound = ["The value must not be zero."]

[unsafe_fn."https://doc.rust-lang.org/core/num/struct.NonZeroU64.html#method.new_unchecked"]
row = 47
n.ConstBound = ["The value must not be zero."]

[unsafe_fn."https://doc.rust-lang.org/core/num/struct.NonZeroU128.html#method.new_unchecked"]
row = 47
n.ConstBound = ["The value must not be zero."]

[unsafe_fn."https://doc.rust-lang.org/core/num/struct.NonZeroUsize.html#method.new_unchecked"]
row = 47
n.ConstBound = ["The value must not be zero."]

[unsafe_fn."https://doc.rust-lang.org/core/num/struct.NonZeroI8.html#method.new_unchecked"]
row = 47
n.ConstBound = ["The value must not be zero."]

[unsafe_fn."https://doc.rust-lang.org/core/num/struct.NonZeroI16.html#method.new_unchecked"]
row = 47
n.ConstBound = ["The value must not be zero."]

[unsafe_fn."https://doc.rust-lang.org/core/num/struct.NonZeroI32.html#method.new_unchecked"]
row = 47
n.ConstBound = ["The value must not be zero."]

[unsafe_fn."https://doc.rust-lang.org/core/num/struct.NonZeroI64.html#method.new_unchecked"]
row = 47
n.ConstBound = ["The value must not be zero."]

[unsafe_fn."https://doc.rust-lang.org/core/num/struct.NonZeroI128.html#method.new_unchecked"]
row = 47
n.ConstBound = ["The value must not be zero."]

[unsafe_fn."https://doc.rust-lang.org/core/num/struct.NonZeroIsize.html#method.new_unchecked"]
row = 47
n.ConstBound = ["The value must not be zero."]

[unsafe_fn."https://doc.rust-lang.org/core/num/struct.NonZeroU8.html#method.unchecked_add"]
row = 48
self.ConstBound = ["The behaviour is undefined as soon as `self + rhs > u8::MAX`."]

[unsafe_fn."https://doc.rust-lang.org/core/num/struct.NonZeroU16.html#method.unchecked_add"]
row = 48
self.ConstBound = ["The behaviour is undefined as soon as `self + rhs > u16::MAX`."]

[unsafe_fn."https://doc.rust-lang.org/core/num/struct.NonZeroU32.html#method.unchecked_add"]
row = 48
self.ConstBound = ["The behaviour is undefined as soon as `self + rhs > u32::MAX`."]

[unsafe_fn."https://doc.rust-lang.org/core/num/struct.NonZeroU64.html#method.unchecked_add"]
row = 48
self.ConstBound = ["The behaviour is undefined as soon as `self + rhs > u64::MAX`."]

[unsafe_fn."https://doc.rust-lang.org/core/num/struct.NonZeroU128.html#method.unchecked_add"]
row = 48
self.ConstBound = ["The behaviour is undefined as soon as `self + rhs > u128::MAX`."]

[unsafe_fn."https://doc.rust-lang.org/core/num/struct.NonZeroUsize.html#method.unchecked_add"]
row = 48
self.ConstBound = ["The behaviour is undefined as soon as `self + rhs > usize::MAX`."]

[unsafe_fn."https://doc.rust-lang.org/core/num/struct.NonZeroU8.html#method.unchecked_mul"]
row = 49
self.ConstBound = ["The behaviour is undefined as soon as `self * rhs > u8::MAX`."]

[unsafe_fn."https://doc.rust-lang.org/core/num/struct.NonZeroU16.html#method.unchecked_mul"]
row = 49
self.ConstBound = ["The behaviour is undefined as soon as `self * rhs > u16::MAX`."]

[unsafe_fn."https://doc.rust-lang.org/core/num/struct.NonZeroU32.html#method.unchecked_mul"]
row = 49
self.ConstBound = ["The behaviour is undefined as soon as `self * rhs > u32::MAX`."]

[unsafe_fn."https://doc.rust-lang.org/core/num/struct.NonZeroU64.html#method.unchecked_mul"]
row = 49
self.ConstBound = ["The behaviour is undefined as soon as `self * rhs > u64::MAX`."]

[unsafe_fn."https://doc.rust-lang.org/core/num/struct.NonZeroU128.html#method.unchecked_mul"]
row = 49
self.ConstBound = ["The behaviour is undefined as soon as `self * rhs > u128::MAX`."]

[unsafe_fn."https://doc.rust-lang.org/core/num/struct.NonZeroUsize.html#method.unchecked_mul"]
row = 49
self.ConstBound = ["The behaviour is undefined as soon as `self * rhs > usize::MAX`."]

[unsafe_fn."https://doc.rust-lang.org/core/num/struct.NonZeroI8.html#method.unchecked_mul"]
row = 49
self.ConstBound = ["The behaviour is undefined as soon as `self * rhs > i8::MAX`, or `self * rhs < i8::MIN`."]

[unsafe_fn."https://doc.rust-lang.org/core/num/struct.NonZeroI16.html#method.unchecked_mul"]
row = 49
self.ConstBound = ["The behaviour is undefined as soon as `self * rhs > i16::MAX`, or `self * rhs < i16::MIN`."]

[unsafe_fn."https://doc.rust-lang.org/core/num/struct.NonZeroI32.html#method.unchecked_mul"]
row = 49
self.ConstBound = ["The behaviour is undefined as soon as `self * rhs > i32::MAX`, or `self * rhs < i32::MIN`."]

[unsafe_fn."https://doc.rust-lang.org/core/num/struct.NonZeroI64.html#method.unchecked_mul"]
row = 49
self.ConstBound = ["The behaviour is undefined as soon as `self * rhs > i64::MAX`, or `self * rhs < i64::MIN`."]

[unsafe_fn."https://doc.rust-lang.org/core/num/struct.NonZeroI128.html#method.unchecked_mul"]
row = 49
self.ConstBound = ["The behaviour is undefined as soon as `self * rhs > i128::MAX`, or `self * rhs < i128::MIN`."]

[unsafe_fn."https://doc.rust-lang.org/core/num/struct.NonZeroIsize.html#method.unchecked_mul"]
row = 49
self.ConstBound = ["The behaviour is undefined as soon as `self * rhs > isize::MAX`, or `self * rhs < isize::MIN`."]

[unsafe_fn."https://doc.rust-lang.org/core/primitive.pointer.html#method.as_ref"]
row = 50
self.Allocated = ["Either the pointer is null or all of the following is true."]
self.Initialized = ["The pointer must point to an initialized instance of `T`."]
self.Dereferencable = ["The memory range of the given size starting at the pointer must all be within the bounds of a single allocated object."]
self.Aligned = ["The pointer must be properly aligned."]
self.ConsistantLayout = [""]
retval.AliasingMutating = ["You must enforce Rust's aliasing rules. In particular, while this reference exists, the memory the pointer points to must not get mutated."]
retval.Outliving = ["The returned lifetime `'a` is arbitrarily chosen and does not necessarily reflect the actual lifetime of the data."]

[unsafe_fn."https://doc.rust-lang.org/core/primitive.pointer.html#method.as_uninit_ref"]
row = 51
self.Allocated = ["Either the pointer is null or all of the following is true."]
self.Dereferencable = ["The memory range of the given size starting at the pointer must all be within the bounds of a single allocated object."]
self.Aligned = ["The pointer must be properly aligned."]
self.ConsistantLayout = [""]
retval.AliasingMutating = ["You must enforce Rust's aliasing rules. In particular, while this reference exists, the memory the pointer points to must not get mutated."]
retval.Outliving = ["The returned lifetime `'a` is arbitrarily chosen and does not necessarily reflect the actual lifetime of the data."]

[unsafe_fn."https://doc.rust-lang.org/core/primitive.pointer.html#method.offset"]
row = 52
self.ConstBound = ["The computed offset, in bytes, cannot overflow an `isize`."]
self.Allocated = [""]
self.Dereferencable = ["Both the starting and resulting pointer must be either in bounds or one byte past the end of the same allocated object."]

[unsafe_fn."https://doc.rust-lang.org/core/primitive.pointer.html#method.byte_offset"]
row = 53
self.ConstBound = ["The computed offset, in bytes, cannot overflow an `isize`."]
self.Allocated = [""]
self.Dereferencable = ["Both the starting and resulting pointer must be either in bounds or one byte past the end of the same allocated object."]

[unsafe_fn."https://doc.rust-lang.org/core/primitive.pointer.html#method.offset_from"]
row = 54
self.ConstBound = ["The distance between the pointers, in bytes, cannot overflow an `isize`."]
self.RelativeBound = ["The distance between the pointers, in bytes, must be an exact multiple of the size of `T`."]
self.Allocated = [""]
self.Dereferencable = [
    "`self` must be either in bounds or one byte past the end of the same allocated object.",
    "Both pointers must be derived from a pointer to the same object."
]
self.ConsistantLayout = [""]
self.EST = ["This function panics if `T` is a Zero-Sized Type (ZST)."]
origin.Allocated = [""]
origin.Dereferencable = ["`origin` must be either in bounds or one byte past the end of the same allocated object."]
origin.ConsistantLayout = [""]

[unsafe_fn."https://doc.rust-lang.org/core/primitive.pointer.html#method.byte_offset_from"]
row = 55
self.ConstBound = ["The distance between the pointers, in bytes, cannot overflow an `isize`."]
self.RelativeBound = ["The distance between the pointers, in bytes, must be an exact multiple of the size of `T`."]
self.Allocated = [""]
self.Dereferencable = [
    "`self` must be either in bounds or one byte past the end of the same allocated object.",
    "Both pointers must be derived from a pointer to the same object."
]
self.ConsistantLayout = [""]
self.EST = ["This function panics if `T` is a Zero-Sized Type (ZST)."]
origin.Allocated = [""]
origin.Dereferencable = ["`origin` must be either in bounds or one byte past the end of the same allocated object."]
origin.ConsistantLayout = [""]

[unsafe_fn."https://doc.rust-lang.org/core/primitive.pointer.html#method.sub_ptr"]
row = 56
self.ConstBound = ["The distance between the pointers, in bytes, cannot overflow an `isize`."]
self.RelativeBound = [
    "The distance between the pointers, in bytes, must be an exact multiple of the size of `T`.",
    "The distance between the pointers must be non-negative (`self` >= `origin`)."
]
self.Allocated = [""]
self.Dereferencable = [
    "`self` must be either in bounds or one byte past the end of the same allocated object.",
    "Both pointers must be derived from a pointer to the same object."
]
self.ConsistantLayout = [""]
self.EST = ["This function panics if `T` is a Zero-Sized Type (ZST)."]
origin.Allocated = [""]
origin.Dereferencable = ["`origin` must be either in bounds or one byte past the end of the same allocated object."]
origin.ConsistantLayout = [""]

[unsafe_fn."https://doc.rust-lang.org/core/primitive.pointer.html#method.add"]
row = 57
self.ConstBound = ["The computed offset cannot exceed `isize::MAX` bytes."]
self.Allocated = [""]
self.Dereferencable = ["Both the starting and resulting pointer must be either in bounds or one byte past the end of the same allocated object."]

[unsafe_fn."https://doc.rust-lang.org/core/primitive.pointer.html#method.byte_add"]
row = 58
self.ConstBound = ["The computed offset cannot exceed `isize::MAX` bytes."]
self.Allocated = [""]
self.Dereferencable = ["Both the starting and resulting pointer must be either in bounds or one byte past the end of the same allocated object."]

[unsafe_fn."https://doc.rust-lang.org/core/primitive.pointer.html#method.sub"]
row = 59
self.ConstBound = ["The computed offset cannot exceed `isize::MAX` bytes."]
self.Allocated = [""]
self.Dereferencable = ["Both the starting and resulting pointer must be either in bounds or one byte past the end of the same allocated object."]

[unsafe_fn."https://doc.rust-lang.org/core/primitive.pointer.html#method.byte_sub"]
row = 60
self.ConstBound = ["The computed offset cannot exceed `isize::MAX` bytes."]
self.Allocated = [""]
self.Dereferencable = ["Both the starting and resulting pointer must be either in bounds or one byte past the end of the same allocated object."]

[unsafe_fn."https://doc.rust-lang.org/core/primitive.pointer.html#method.read"]
row = 61
self.Allocated = [
    "A null pointer is never valid, not even for accesses of size zero.",
    "Even for operations of size zero, the pointer must not be pointing to deallocated memory."
]
self.Initialized = ["`self` must point to a properly initialized value of type `T`."]
self.Dereferencable = ["The memory range of the given size starting at the pointer must all be within the bounds of a single allocated object."]
self.Aligned = ["`self` must be properly aligned."]
self.ConsistantLayout = [""]
retval.DualOwner = ["If `T` is not `Copy`, using both the returned value and the value at `self` can violate memory safety. Note that assigning to `self` counts as a use because it will attempt to drop the value at `self`."]

[unsafe_fn."https://doc.rust-lang.org/core/primitive.pointer.html#method.read_volatile"]
row = 62
self.Allocated = [
    "A null pointer is never valid, not even for accesses of size zero.",
    "Even for operations of size zero, the pointer must not be pointing to deallocated memory."
]
self.Initialized = ["`self` must point to a properly initialized value of type `T`."]
self.Dereferencable = ["The memory range of the given size starting at the pointer must all be within the bounds of a single allocated object."]
self.Aligned = ["`self` must be properly aligned."]
self.ConsistantLayout = [""]
retval.DualOwner = [
    "If `T` is not `Copy`, using both the returned value and the value at `self` can violate memory safety. Note that assigning to `self` counts as a use because it will attempt to drop the value at `self`.",
    "However, storing non-`Copy` types in volatile memory is almost certainly incorrect."
]

[unsafe_fn."https://doc.rust-lang.org/core/primitive.pointer.html#method.read_unaligned"]
row = 63
self.Allocated = [
    "A null pointer is never valid, not even for accesses of size zero.",
    "Even for operations of size zero, the pointer must not be pointing to deallocated memory."
]
self.Initialized = ["`self` must point to a properly initialized value of type `T`."]
self.Dereferencable = ["The memory range of the given size starting at the pointer must all be within the bounds of a single allocated object."]
self.ConsistantLayout = [""]
retval.DualOwner = ["If `T` is not `Copy`, using both the returned value and the value at `self` can violate memory safety. Note that assigning to `self` counts as a use because it will attempt to drop the value at `self`."]

[unsafe_fn."https://doc.rust-lang.org/core/primitive.pointer.html#method.copy_to"]
row = 64
self.Allocated = [
    "A null pointer is never valid, not even for accesses of size zero.",
    "Even for operations of size zero, the pointer must not be pointing to deallocated memory."
]
self.Dereferencable = ["The memory range of the given size (`count * size_of::<T>()` bytes) starting at the pointer must all be within the bounds of a single allocated object."]
self.Aligned = ["`self` must be properly aligned."]
self.ConsistantLayout = [""]
dest.Allocated = [
    "A null pointer is never valid, not even for accesses of size zero.",
    "Even for operations of size zero, the pointer must not be pointing to deallocated memory."
]
dest.Dereferencable = ["The memory range of the given size (`count * size_of::<T>()` bytes) starting at the pointer must all be within the bounds of a single allocated object."]
dest.Aligned = ["`dest` must be properly aligned."]
dest.ConsistantLayout = [""]
dest.DualOwner = ["If `T` is not `Copy`, using both the values in the region beginning at `self` and the region beginning at `*dest` can violate memory safety. Note that assigning to `*dest` counts as a use because it will attempt to drop the value at `*dest`."]
dest.Untyped = ["The copy is untyped in the sense that data may be uninitialized or otherwise violate the requirements of `T`."]
dest.Leaked = [""]

[unsafe_fn."https://doc.rust-lang.org/core/primitive.pointer.html#method.copy_to_nonoverlapping"]
row = 65
self.Allocated = [
    "A null pointer is never valid, not even for accesses of size zero.",
    "Even for operations of size zero, the pointer must not be pointing to deallocated memory."
]
self.Dereferencable = [
    "The memory range of the given size (`count * size_of::<T>()` bytes) starting at the pointer must all be within the bounds of a single allocated object.",
    "The region of memory beginning at `self` with a size of `count * size_of::<T>()` bytes must not overlap with the region of memory beginning at `dest` with the same size."
]
self.Aligned = ["`self` must be properly aligned."]
self.ConsistantLayout = [""]
dest.Allocated = [
    "A null pointer is never valid, not even for accesses of size zero.",
    "Even for operations of size zero, the pointer must not be pointing to deallocated memory."
]
dest.Dereferencable = [
    "The memory range of the given size (`count * size_of::<T>()` bytes) starting at the pointer must all be within the bounds of a single allocated object.",
    "The region of memory beginning at `self` with a size of `count * size_of::<T>()` bytes must not overlap with the region of memory beginning at `dest` with the same size."
]
dest.Aligned = ["`dest` must be properly aligned."]
dest.ConsistantLayout = [""]
dest.DualOwner = ["If `T` is not `Copy`, using both the values in the region beginning at `self` and the region beginning at `*dest` can violate memory safety. Note that assigning to `*dest` counts as a use because it will attempt to drop the value at `*dest`."]
dest.Untyped = ["The copy is untyped in the sense that data may be uninitialized or otherwise violate the requirements of `T`."]
dest.Leaked = [""]

[unsafe_fn."https://doc.rust-lang.org/core/primitive.pointer.html#method.get_unchecked"]
row = 66
self.Dereferencable = ["When `self` is not dereferenceable is undefined behavior even if the resulting pointer is not used."]
index.ConstBound = ["Calling this method with an out-of-bounds index is undefined behavior even if the resulting pointer is not used."]

[unsafe_fn."https://doc.rust-lang.org/core/primitive.pointer.html#method.as_uninit_slice"]
row = 67
self.ConstBound = ["The total size `ptr.len() * mem::size_of::<T>()` of the slice must be no larger than `isize::MAX`."]
self.Allocated = ["Either the pointer is null or all of the following is true."]
self.Dereferencable = ["The entire memory range of this slice (`ptr.len() * mem::size_of::<T>()` bytes) must be contained within a single allocated object! Slices can never span across multiple allocated objects."]
self.Aligned = ["The pointer must be aligned even for zero-length slices."]
self.ConsistantLayout = [""]
retval.AliasingMutating = ["You must enforce Rust's aliasing rules. In particular, while this reference exists, the memory the pointer points to must not get mutated."]
retval.Outliving = ["The returned lifetime `'a` is arbitrarily chosen and does not necessarily reflect the actual lifetime of the data."]

[unsafe_fn."https://doc.rust-lang.org/core/primitive.pointer.html#method.as_ref-1"]
row = 68
self.Allocated = ["Either the pointer is null or all of the following is true."]
self.Initialized = ["The pointer must point to an initialized instance of `T`."]
self.Dereferencable = ["The memory range of the given size starting at the pointer must all be within the bounds of a single allocated object."]
self.Aligned = ["The pointer must be properly aligned."]
self.ConsistantLayout = [""]
retval.AliasingMutating = ["You must enforce Rust's aliasing rules. In particular, while this reference exists, the memory the pointer points to must not get mutated."]
retval.Outliving = ["The returned lifetime `'a` is arbitrarily chosen and does not necessarily reflect the actual lifetime of the data."]

[unsafe_fn."https://doc.rust-lang.org/core/primitive.pointer.html#method.as_uninit_ref-1"]
row = 69
self.Allocated = ["Either the pointer is null or all of the following is true."]
self.Dereferencable = ["The memory range of the given size starting at the pointer must all be within the bounds of a single allocated object."]
self.Aligned = ["The pointer must be properly aligned."]
self.ConsistantLayout = [""]
retval.AliasingMutating = ["You must enforce Rust's aliasing rules. In particular, while this reference exists, the memory the pointer points to must not get mutated."]
retval.Outliving = ["The returned lifetime `'a` is arbitrarily chosen and does not necessarily reflect the actual lifetime of the data."]

[unsafe_fn."https://doc.rust-lang.org/core/primitive.pointer.html#method.offset-1"]
row = 70
self.ConstBound = ["The computed offset, in bytes, cannot overflow an `isize`."]
self.Allocated = [""]
self.Dereferencable = ["Both the starting and resulting pointer must be either in bounds or one byte past the end of the same allocated object."]

[unsafe_fn."https://doc.rust-lang.org/core/primitive.pointer.html#method.byte_offset-1"]
row = 71
self.ConstBound = ["The computed offset, in bytes, cannot overflow an `isize`."]
self.Allocated = [""]
self.Dereferencable = ["Both the starting and resulting pointer must be either in bounds or one byte past the end of the same allocated object."]

[unsafe_fn."https://doc.rust-lang.org/core/primitive.pointer.html#method.as_mut"]
row = 72
self.Allocated = ["Either the pointer is null or all of the following is true."]
self.Initialized = ["The pointer must point to an initialized instance of `T`."]
self.Dereferencable = ["The memory range of the given size starting at the pointer must all be within the bounds of a single allocated object."]
self.Aligned = ["The pointer must be properly aligned."]
self.ConsistantLayout = [""]
retval.AliasingMutating = ["You must enforce Rust's aliasing rules. In particular, while this reference exists, the memory the pointer points to must not get accessed (read or written) through any other pointer."]
retval.Outliving = ["The returned lifetime `'a` is arbitrarily chosen and does not necessarily reflect the actual lifetime of the data."]

[unsafe_fn."https://doc.rust-lang.org/core/primitive.pointer.html#method.as_uninit_mut"]
row = 73
self.Allocated = ["Either the pointer is null or all of the following is true."]
self.Dereferencable = ["The memory range of the given size starting at the pointer must all be within the bounds of a single allocated object."]
self.Aligned = ["The pointer must be properly aligned."]
self.ConsistantLayout = [""]
retval.AliasingMutating = ["You must enforce Rust's aliasing rules. In particular, while this reference exists, the memory the pointer points to must not get accessed (read or written) through any other pointer."]
retval.Outliving = ["The returned lifetime `'a` is arbitrarily chosen and does not necessarily reflect the actual lifetime of the data."]

[unsafe_fn."https://doc.rust-lang.org/core/primitive.pointer.html#method.offset_from-1"]
row = 74
self.ConstBound = ["The distance between the pointers, in bytes, cannot overflow an `isize`."]
self.RelativeBound = ["The distance between the pointers, in bytes, must be an exact multiple of the size of `T`."]
self.Allocated = [""]
self.Dereferencable = [
    "`self` must be either in bounds or one byte past the end of the same allocated object.",
    "Both pointers must be derived from a pointer to the same object."
]
self.ConsistantLayout = [""]
self.EST = ["This function panics if `T` is a Zero-Sized Type (ZST)."]
origin.Allocated = [""]
origin.Dereferencable = ["`origin` must be either in bounds or one byte past the end of the same allocated object."]
origin.ConsistantLayout = [""]

[unsafe_fn."https://doc.rust-lang.org/core/primitive.pointer.html#method.byte_offset_from-1"]
row = 75
self.ConstBound = ["The distance between the pointers, in bytes, cannot overflow an `isize`."]
self.RelativeBound = ["The distance between the pointers, in bytes, must be an exact multiple of the size of `T`."]
self.Allocated = [""]
self.Dereferencable = [
    "`self` must be either in bounds or one byte past the end of the same allocated object.",
    "Both pointers must be derived from a pointer to the same object."
]
self.ConsistantLayout = [""]
self.EST = ["This function panics if `T` is a Zero-Sized Type (ZST)."]
origin.Allocated = [""]
origin.Dereferencable = ["`origin` must be either in bounds or one byte past the end of the same allocated object."]
origin.ConsistantLayout = [""]

[unsafe_fn."https://doc.rust-lang.org/core/primitive.pointer.html#method.sub_ptr-1"]
row = 76
self.ConstBound = ["The distance between the pointers, in bytes, cannot overflow an `isize`."]
self.RelativeBound = [
    "The distance between the pointers, in bytes, must be an exact multiple of the size of `T`.",
    "The distance between the pointers must be non-negative (`self` >= `origin`)."
]
self.Allocated = [""]
self.Dereferencable = [
    "`self` must be either in bounds or one byte past the end of the same allocated object.",
    "Both pointers must be derived from a pointer to the same object."
]
self.ConsistantLayout = [""]
self.EST = ["This function panics if `T` is a Zero-Sized Type (ZST)."]
origin.Allocated = [""]
origin.Dereferencable = ["`origin` must be either in bounds or one byte past the end of the same allocated object."]
origin.ConsistantLayout = [""]

[unsafe_fn."https://doc.rust-lang.org/core/primitive.pointer.html#method.add-1"]
row = 77
self.ConstBound = ["The computed offset cannot exceed `isize::MAX` bytes."]
self.Allocated = [""]
self.Dereferencable = ["Both the starting and resulting pointer must be either in bounds or one byte past the end of the same allocated object."]

[unsafe_fn."https://doc.rust-lang.org/core/primitive.pointer.html#method.byte_add-1"]
row = 78
self.ConstBound = ["The computed offset cannot exceed `isize::MAX` bytes."]
self.Allocated = [""]
self.Dereferencable = ["Both the starting and resulting pointer must be either in bounds or one byte past the end of the same allocated object."]

[unsafe_fn."https://doc.rust-lang.org/core/primitive.pointer.html#method.sub-1"]
row = 79
self.ConstBound = ["The computed offset cannot exceed `isize::MAX` bytes."]
self.Allocated = [""]
self.Dereferencable = ["Both the starting and resulting pointer must be either in bounds or one byte past the end of the same allocated object."]

[unsafe_fn."https://doc.rust-lang.org/core/primitive.pointer.html#method.byte_sub-1"]
row = 80
self.ConstBound = ["The computed offset cannot exceed `isize::MAX` bytes."]
self.Allocated = [""]
self.Dereferencable = ["Both the starting and resulting pointer must be either in bounds or one byte past the end of the same allocated object."]

[unsafe_fn."https://doc.rust-lang.org/core/primitive.pointer.html#method.read-1"]
row = 81
self.Allocated = [
    "A null pointer is never valid, not even for accesses of size zero.",
    "Even for operations of size zero, the pointer must not be pointing to deallocated memory."
]
self.Initialized = ["`self` must point to a properly initialized value of type `T`."]
self.Dereferencable = ["The memory range of the given size starting at the pointer must all be within the bounds of a single allocated object."]
self.Aligned = ["`self` must be properly aligned."]
self.ConsistantLayout = [""]
retval.DualOwner = ["If `T` is not `Copy`, using both the returned value and the value at `self` can violate memory safety. Note that assigning to `self` counts as a use because it will attempt to drop the value at `self`."]

[unsafe_fn."https://doc.rust-lang.org/core/primitive.pointer.html#method.read_volatile-1"]
row = 82
self.Allocated = [
    "A null pointer is never valid, not even for accesses of size zero.",
    "Even for operations of size zero, the pointer must not be pointing to deallocated memory."
]
self.Initialized = ["`self` must point to a properly initialized value of type `T`."]
self.Dereferencable = ["The memory range of the given size starting at the pointer must all be within the bounds of a single allocated object."]
self.Aligned = ["`self` must be properly aligned."]
self.ConsistantLayout = [""]
retval.DualOwner = [
    "If `T` is not `Copy`, using both the returned value and the value at `self` can violate memory safety. Note that assigning to `self` counts as a use because it will attempt to drop the value at `self`.",
    "However, storing non-`Copy` types in volatile memory is almost certainly incorrect."
]

[unsafe_fn."https://doc.rust-lang.org/core/primitive.pointer.html#method.read_unaligned-1"]
row = 83
self.Allocated = [
    "A null pointer is never valid, not even for accesses of size zero.",
    "Even for operations of size zero, the pointer must not be pointing to deallocated memory."
]
self.Initialized = ["`self` must point to a properly initialized value of type `T`."]
self.Dereferencable = ["The memory range of the given size starting at the pointer must all be within the bounds of a single allocated object."]
self.ConsistantLayout = [""]
retval.DualOwner = ["If `T` is not `Copy`, using both the returned value and the value at `self` can violate memory safety. Note that assigning to `self` counts as a use because it will attempt to drop the value at `self`."]

[unsafe_fn."https://doc.rust-lang.org/core/primitive.pointer.html#method.copy_to-1"]
row = 84
self.Allocated = [
    "A null pointer is never valid, not even for accesses of size zero.",
    "Even for operations of size zero, the pointer must not be pointing to deallocated memory."
]
self.Dereferencable = ["The memory range of the given size (`count * size_of::<T>()` bytes) starting at the pointer must all be within the bounds of a single allocated object."]
self.Aligned = ["`self` must be properly aligned."]
self.ConsistantLayout = [""]
dest.Allocated = [
    "A null pointer is never valid, not even for accesses of size zero.",
    "Even for operations of size zero, the pointer must not be pointing to deallocated memory."
]
dest.Dereferencable = ["The memory range of the given size (`count * size_of::<T>()` bytes) starting at the pointer must all be within the bounds of a single allocated object."]
dest.Aligned = ["`dest` must be properly aligned."]
dest.ConsistantLayout = [""]
dest.DualOwner = ["If `T` is not `Copy`, using both the values in the region beginning at `self` and the region beginning at `*dest` can violate memory safety. Note that assigning to `*dest` counts as a use because it will attempt to drop the value at `*dest`."]
dest.Untyped = ["The copy is untyped in the sense that data may be uninitialized or otherwise violate the requirements of `T`."]
dest.Leaked = [""]

[unsafe_fn."https://doc.rust-lang.org/core/primitive.pointer.html#method.copy_to_nonoverlapping-1"]
row = 85
self.Allocated = [
    "A null pointer is never valid, not even for accesses of size zero.",
    "Even for operations of size zero, the pointer must not be pointing to deallocated memory."
]
self.Dereferencable = [
    "The memory range of the given size (`count * size_of::<T>()` bytes) starting at the pointer must all be within the bounds of a single allocated object.",
    "The region of memory beginning at `self` with a size of `count * size_of::<T>()` bytes must not overlap with the region of memory beginning at `dest` with the same size."
]
self.Aligned = ["`self` must be properly aligned."]
self.ConsistantLayout = [""]
dest.Allocated = [
    "A null pointer is never valid, not even for accesses of size zero.",
    "Even for operations of size zero, the pointer must not be pointing to deallocated memory."
]
dest.Dereferencable = [
    "The memory range of the given size (`count * size_of::<T>()` bytes) starting at the pointer must all be within the bounds of a single allocated object.",
    "The region of memory beginning at `self` with a size of `count * size_of::<T>()` bytes must not overlap with the region of memory beginning at `dest` with the same size."
]
dest.Aligned = ["`dest` must be properly aligned."]
dest.ConsistantLayout = [""]
dest.DualOwner = ["If `T` is not `Copy`, using both the values in the region beginning at `self` and the region beginning at `*dest` can violate memory safety. Note that assigning to `*dest` counts as a use because it will attempt to drop the value at `*dest`."]
dest.Untyped = ["The copy is untyped in the sense that data may be uninitialized or otherwise violate the requirements of `T`."]
dest.Leaked = [""]

[unsafe_fn."https://doc.rust-lang.org/core/primitive.pointer.html#method.copy_from"]
row = 86
self.Allocated = [
    "A null pointer is never valid, not even for accesses of size zero.",
    "Even for operations of size zero, the pointer must not be pointing to deallocated memory."
]
self.Dereferencable = ["The memory range of the given size (`count * size_of::<T>()` bytes) starting at the pointer must all be within the bounds of a single allocated object."]
self.Aligned = ["`self` must be properly aligned."]
self.ConsistantLayout = [""]
self.Leaked = [""]
src.Allocated = [
    "A null pointer is never valid, not even for accesses of size zero.",
    "Even for operations of size zero, the pointer must not be pointing to deallocated memory."
]
src.Dereferencable = ["The memory range of the given size (`count * size_of::<T>()` bytes) starting at the pointer must all be within the bounds of a single allocated object."]
src.Aligned = ["`src` must be properly aligned."]
src.ConsistantLayout = [""]
src.DualOwner = ["If `T` is not `Copy`, using both the values in the region beginning at `self` and the region beginning at `*src` can violate memory safety. Note that assigning to `*src` counts as a use because it will attempt to drop the value at `*src`."]
src.Untyped = ["The copy is untyped in the sense that data may be uninitialized or otherwise violate the requirements of `T`."]

[unsafe_fn."https://doc.rust-lang.org/core/primitive.pointer.html#method.copy_from_nonoverlapping"]
row = 87
self.Allocated = [
    "A null pointer is never valid, not even for accesses of size zero.",
    "Even for operations of size zero, the pointer must not be pointing to deallocated memory."
]
self.Dereferencable = [
    "The memory range of the given size (`count * size_of::<T>()` bytes) starting at the pointer must all be within the bounds of a single allocated object.",
    "The region of memory beginning at `self` with a size of `count * size_of::<T>()` bytes must not overlap with the region of memory beginning at `src` with the same size."
]
self.Aligned = ["`self` must be properly aligned."]
self.ConsistantLayout = [""]
self.Leaked = [""]
src.Allocated = [
    "A null pointer is never valid, not even for accesses of size zero.",
    "Even for operations of size zero, the pointer must not be pointing to deallocated memory."
]
src.Dereferencable = [
    "The memory range of the given size (`count * size_of::<T>()` bytes) starting at the pointer must all be within the bounds of a single allocated object.",
    "The region of memory beginning at `self` with a size of `count * size_of::<T>()` bytes must not overlap with the region of memory beginning at `src` with the same size."
]
src.Aligned = ["`src` must be properly aligned."]
src.ConsistantLayout = [""]
src.DualOwner = ["If `T` is not `Copy`, using both the values in the region beginning at `self` and the region beginning at `*src` can violate memory safety. Note that assigning to `*src` counts as a use because it will attempt to drop the value at `*src`."]
src.Untyped = ["The copy is untyped in the sense that data may be uninitialized or otherwise violate the requirements of `T`."]

[unsafe_fn."https://doc.rust-lang.org/core/primitive.pointer.html#method.drop_in_place"]
row = 88
self.Allocated = [
    "`self` must be nonnull, even if T has size 0.",
    "Even for operations of size zero, the pointer must not be pointing to deallocated memory."
]
self.Initialized = ["The value `self` points to must be valid for dropping, which may mean it must uphold additional invariants. These invariants depend on the type of the value being dropped."]
self.Dereferencable = ["The memory range of the given size starting at the pointer must all be within the bounds of a single allocated object."]
self.Aligned = [
    "`self` must be properly aligned, even if `T` has size 0.",
    "Unaligned values cannot be dropped in place, they must be copied to an aligned location first using `ptr::read_unaligned`."
]
self.ConsistantLayout = [""]
self.Freed = ["Executes the destructor (if any) of the pointed-to value."]

[unsafe_fn."https://doc.rust-lang.org/core/primitive.pointer.html#method.write"]
row = 89
self.Allocated = [
    "A null pointer is never valid, not even for accesses of size zero.",
    "Even for operations of size zero, the pointer must not be pointing to deallocated memory."
]
self.Dereferencable = ["The memory range of the given size starting at the pointer must all be within the bounds of a single allocated object."]
self.Aligned = ["`self` must be properly aligned."]
self.ConsistantLayout = [""]
self.Leaked = ["This is safe, but it could leak allocations or resources, so care should be taken not to overwrite an object that should be dropped."]

[unsafe_fn."https://doc.rust-lang.org/core/primitive.pointer.html#method.write_bytes"]
row = 90
self.Allocated = [
    "A null pointer is never valid, not even for accesses of size zero.",
    "Even for operations of size zero, the pointer must not be pointing to deallocated memory."
]
self.Dereferencable = ["The memory range of the given size (`count * size_of::<T>()` bytes) starting at the pointer must all be within the bounds of a single allocated object."]
self.Aligned = ["`self` must be properly aligned."]
self.ConsistantLayout = [""]
self.Untyped = ["Additionally, note that changing `self` in this way can easily lead to undefined behavior (UB) later if the written bytes are not a valid representation of some `T`."]
self.Leaked = [""]

[unsafe_fn."https://doc.rust-lang.org/core/primitive.pointer.html#method.write_volatile"]
row = 91
self.Allocated = [
    "A null pointer is never valid, not even for accesses of size zero.",
    "Even for operations of size zero, the pointer must not be pointing to deallocated memory."
]
self.Dereferencable = ["The memory range of the given size starting at the pointer must all be within the bounds of a single allocated object."]
self.Aligned = ["`self` must be properly aligned."]
self.ConsistantLayout = [""]
self.Leaked = ["This is safe, but it could leak allocations or resources, so care should be taken not to overwrite an object that should be dropped."]

[unsafe_fn."https://doc.rust-lang.org/core/primitive.pointer.html#method.write_unaligned"]
row = 92
self.Allocated = [
    "A null pointer is never valid, not even for accesses of size zero.",
    "Even for operations of size zero, the pointer must not be pointing to deallocated memory."
]
self.Dereferencable = ["The memory range of the given size starting at the pointer must all be within the bounds of a single allocated object."]
self.ConsistantLayout = [""]
self.Leaked = ["This is safe, but it could leak allocations or resources, so care should be taken not to overwrite an object that should be dropped."]

[unsafe_fn."https://doc.rust-lang.org/core/primitive.pointer.html#method.replace"]
row = 93
self.Allocated = [
    "A null pointer is never valid, not even for accesses of size zero.",
    "Even for operations of size zero, the pointer must not be pointing to deallocated memory."
]
self.Initialized = ["`self` must point to a properly initialized value of type `T`."]
self.Dereferencable = ["The memory range of the given size starting at the pointer must all be within the bounds of a single allocated object."]
self.Aligned = ["`self` must be properly aligned."]
self.ConsistantLayout = [""]
src.Leaked = ["Neither value is dropped."]

[unsafe_fn."https://doc.rust-lang.org/core/primitive.pointer.html#method.swap"]
row = 94
self.Allocated = [
    "A null pointer is never valid, not even for accesses of size zero.",
    "Even for operations of size zero, the pointer must not be pointing to deallocated memory."
]
self.Dereferencable = ["The memory range of the given size starting at the pointer must all be within the bounds of a single allocated object."]
selfx.Aligned = ["`self` must be properly aligned."]
self.ConsistantLayout = [""]
self.Untyped = ["The operation is untyped in the sense that data may be uninitialized or otherwise violate the requirements of `T`."]
with.Allocated = [
    "A null pointer is never valid, not even for accesses of size zero.",
    "Even for operations of size zero, the pointer must not be pointing to deallocated memory."
]
with.Dereferencable = ["The memory range of the given size starting at the pointer must all be within the bounds of a single allocated object."]
with.Aligned = ["`with` must be properly aligned."]
with.ConsistantLayout = [""]
with.Untyped = ["The operation is untyped in the sense that data may be uninitialized or otherwise violate the requirements of `T`."]

[unsafe_fn."https://doc.rust-lang.org/core/primitive.pointer.html#method.split_at_mut"]
row = 95
self.Allocated = [""]
self.Dereferencable = ["`self` must be dereferenceable and span a single allocation that is at least `mid * size_of::<T>()` bytes long."]
mid.ConstBound = [
    "Panics if `mid` > `len`.",
    "`mid` must be in-bounds of the underlying allocated object."
]

[unsafe_fn."https://doc.rust-lang.org/core/primitive.pointer.html#method.split_at_mut_unchecked"]
row = 96
self.Allocated = [""]
self.Dereferencable = ["`self` must be dereferenceable and span a single allocation that is at least `mid * size_of::<T>()` bytes long."]
mid.ConstBound = [
    "Panics if `mid` > `len`.",
    "`mid` must be in-bounds of the underlying allocated object."
]

[unsafe_fn."https://doc.rust-lang.org/core/primitive.pointer.html#method.get_unchecked_mut"]
row = 97
self.Dereferencable = ["When `self` is not dereferenceable is undefined behavior even if the resulting pointer is not used."]
index.ConstBound = ["Calling this method with an out-of-bounds index is undefined behavior even if the resulting pointer is not used."]

[unsafe_fn."https://doc.rust-lang.org/core/primitive.pointer.html#method.as_uninit_slice-1"]
row = 98
self.ConstBound = ["The total size `ptr.len() * mem::size_of::<T>()` of the slice must be no larger than `isize::MAX`."]
self.Allocated = ["Either the pointer is null or all of the following is true."]
self.Dereferencable = ["The entire memory range of this slice (`ptr.len() * mem::size_of::<T>()` bytes) must be contained within a single allocated object! Slices can never span across multiple allocated objects."]
self.Aligned = ["The pointer must be aligned even for zero-length slices."]
self.ConsistantLayout = [""]
retval.AliasingMutating = ["You must enforce Rust's aliasing rules. In particular, while this reference exists, the memory the pointer points to must not get mutated."]
retval.Outliving = ["The returned lifetime `'a` is arbitrarily chosen and does not necessarily reflect the actual lifetime of the data."]

[unsafe_fn."https://doc.rust-lang.org/core/primitive.pointer.html#method.as_uninit_slice_mut"]
row = 99
self.ConstBound = ["The total size `ptr.len() * mem::size_of::<T>()` of the slice must be no larger than `isize::MAX`."]
self.Allocated = ["Either the pointer is null or all of the following is true."]
self.Dereferencable = ["The entire memory range of this slice (`ptr.len() * mem::size_of::<T>()` bytes) must be contained within a single allocated object! Slices can never span across multiple allocated objects."]
self.Aligned = ["The pointer must be aligned even for zero-length slices."]
self.ConsistantLayout = [""]
retval.AliasingMutating = ["You must enforce Rust's aliasing rules. In particular, while this reference exists, the memory the pointer points to must not get accessed (read or written) through any other pointer."]
retval.Outliving = ["The returned lifetime `'a` is arbitrarily chosen and does not necessarily reflect the actual lifetime of the data."]

[unsafe_fn."https://doc.rust-lang.org/core/ptr/struct.Alignment.html#method.new_unchecked"]
row = 100
ConstBound = [
    "`align` must be a power of two.",
    "Equivalently, it must be `1 << exp` for some exp in `0..usize::BITS`. It must not be zero."
]

[unsafe_fn."https://doc.rust-lang.org/core/ptr/fn.drop_in_place.html"]
row = 101
to_drop.Allocated = [
    "`to_drop` must be nonnull, even if T has size 0.",
    "Even for operations of size zero, the pointer must not be pointing to deallocated memory."
]
to_drop.Initialized = ["The value `to_drop` points to must be valid for dropping, which may mean it must uphold additional invariants. These invariants depend on the type of the value being dropped."]
to_drop.Dereferencable = ["The memory range of the given size starting at the pointer must all be within the bounds of a single allocated object."]
to_drop.Aligned = [
    "`to_drop` must be properly aligned, even if `T` has size 0.",
    "Unaligned values cannot be dropped in place, they must be copied to an aligned location first using `ptr::read_unaligned`."
]
to_drop.ConsistantLayout = [""]
to_drop.Freed = ["Executes the destructor (if any) of the pointed-to value."]

[unsafe_fn."https://doc.rust-lang.org/core/ptr/fn.swap.html"]
row = 102
x.Allocated = [
    "A null pointer is never valid, not even for accesses of size zero.",
    "Even for operations of size zero, the pointer must not be pointing to deallocated memory."
]
x.Dereferencable = ["The memory range of the given size starting at the pointer must all be within the bounds of a single allocated object."]
x.Aligned = ["`x` must be properly aligned."]
x.ConsistantLayout = [""]
x.Untyped = ["The operation is untyped in the sense that data may be uninitialized or otherwise violate the requirements of `T`."]
y.Allocated = [
    "A null pointer is never valid, not even for accesses of size zero.",
    "Even for operations of size zero, the pointer must not be pointing to deallocated memory."
]
y.Dereferencable = ["The memory range of the given size starting at the pointer must all be within the bounds of a single allocated object."]
y.Aligned = ["`y` must be properly aligned."]
y.ConsistantLayout = [""]
y.Untyped = ["The operation is untyped in the sense that data may be uninitialized or otherwise violate the requirements of `T`."]

[unsafe_fn."https://doc.rust-lang.org/core/ptr/fn.swap_nonoverlapping.html"]
row = 103
x.Allocated = [
    "A null pointer is never valid, not even for accesses of size zero.",
    "Even for operations of size zero, the pointer must not be pointing to deallocated memory."
]
x.Dereferencable = [
    "The memory range of the given size (`count * size_of::<T>()` bytes) starting at the pointer must all be within the bounds of a single allocated object.",
    "The region of memory beginning at `x` with a size of `count * size_of::<T>()` bytes must not overlap with the region of memory beginning at `y` with the same size."
]
x.Aligned = ["`x` must be properly aligned."]
x.ConsistantLayout = [""]
x.Untyped = ["The operation is untyped in the sense that data may be uninitialized or otherwise violate the requirements of `T`."]
y.Allocated = [
    "A null pointer is never valid, not even for accesses of size zero.",
    "Even for operations of size zero, the pointer must not be pointing to deallocated memory."
]
y.Dereferencable = [
    "The memory range of the given size (`count * size_of::<T>()` bytes) starting at the pointer must all be within the bounds of a single allocated object.",
    "The region of memory beginning at `x` with a size of `count * size_of::<T>()` bytes must not overlap with the region of memory beginning at `y` with the same size."
]
y.Aligned = ["`y` must be properly aligned."]
y.ConsistantLayout = [""]
y.Untyped = ["The operation is untyped in the sense that data may be uninitialized or otherwise violate the requirements of `T`."]

[unsafe_fn."https://doc.rust-lang.org/core/ptr/fn.replace.html"]
row = 104
dst.Allocated = [
    "A null pointer is never valid, not even for accesses of size zero.",
    "Even for operations of size zero, the pointer must not be pointing to deallocated memory."
]
dst.Initialized = ["`dst` must point to a properly initialized value of type `T`."]
dst.Dereferencable = ["The memory range of the given size starting at the pointer must all be within the bounds of a single allocated object."]
dst.Aligned = ["`dst` must be properly aligned."]
dst.ConsistantLayout = [""]
src.Leaked = ["Neither value is dropped."]

[unsafe_fn."https://doc.rust-lang.org/core/ptr/fn.read.html"]
row = 105
src.Allocated = [
    "A null pointer is never valid, not even for accesses of size zero.",
    "Even for operations of size zero, the pointer must not be pointing to deallocated memory."
]
src.Initialized = ["`src` must point to a properly initialized value of type `T`."]
src.Dereferencable = ["The memory range of the given size starting at the pointer must all be within the bounds of a single allocated object."]
src.Aligned = ["`src` must be properly aligned."]
src.ConsistantLayout = [""]
retval.DualOwner = ["If `T` is not `Copy`, using both the returned value and the value at `*src` can violate memory safety. Note that assigning to `*src` counts as a use because it will attempt to drop the value at `*src`."]

[unsafe_fn."https://doc.rust-lang.org/core/ptr/fn.read_unaligned.html"]
row = 106
src.Allocated = [
    "A null pointer is never valid, not even for accesses of size zero.",
    "Even for operations of size zero, the pointer must not be pointing to deallocated memory."
]
src.Initialized = ["`src` must point to a properly initialized value of type `T`."]
src.Dereferencable = ["The memory range of the given size starting at the pointer must all be within the bounds of a single allocated object."]
src.ConsistantLayout = [""]
retval.DualOwner = ["If `T` is not `Copy`, using both the returned value and the value at `*src` can violate memory safety. Note that assigning to `*src` counts as a use because it will attempt to drop the value at `*src`."]

[unsafe_fn."https://doc.rust-lang.org/core/ptr/fn.write.html"]
row = 107
dst.Allocated = [
    "A null pointer is never valid, not even for accesses of size zero.",
    "Even for operations of size zero, the pointer must not be pointing to deallocated memory."
]
dst.Dereferencable = ["The memory range of the given size starting at the pointer must all be within the bounds of a single allocated object."]
dst.Aligned = ["`dst` must be properly aligned."]
dst.ConsistantLayout = [""]
dst.Leaked = ["This is safe, but it could leak allocations or resources, so care should be taken not to overwrite an object that should be dropped."]

[unsafe_fn."https://doc.rust-lang.org/core/ptr/fn.write_unaligned.html"]
row = 108
dst.Allocated = [
    "A null pointer is never valid, not even for accesses of size zero.",
    "Even for operations of size zero, the pointer must not be pointing to deallocated memory."
]
dst.Dereferencable = ["The memory range of the given size starting at the pointer must all be within the bounds of a single allocated object."]
dst.ConsistantLayout = [""]
dst.Leaked = ["This is safe, but it could leak allocations or resources, so care should be taken not to overwrite an object that should be dropped."]

[unsafe_fn."https://doc.rust-lang.org/core/ptr/fn.write_bytes.html"]
row = 109
dst.Allocated = [
    "A null pointer is never valid, not even for accesses of size zero.",
    "Even for operations of size zero, the pointer must not be pointing to deallocated memory."
]
dst.Dereferencable = ["The memory range of the given size (`count * size_of::<T>()` bytes) starting at the pointer must all be within the bounds of a single allocated object."]
dst.Aligned = ["`dst` must be properly aligned."]
dst.ConsistantLayout = [""]
dst.Untyped = ["Additionally, note that changing `dst` in this way can easily lead to undefined behavior (UB) later if the written bytes are not a valid representation of some `T`."]
dst.Leaked = [""]

[unsafe_fn."https://doc.rust-lang.org/core/ptr/fn.copy.html"]
row = 110
src.Allocated = [
    "A null pointer is never valid, not even for accesses of size zero.",
    "Even for operations of size zero, the pointer must not be pointing to deallocated memory."
]
src.Dereferencable = ["The memory range of the given size (`count * size_of::<T>()` bytes) starting at the pointer must all be within the bounds of a single allocated object."]
src.Aligned = ["`src` must be properly aligned."]
src.ConsistantLayout = [""]
dst.Allocated = [
    "A null pointer is never valid, not even for accesses of size zero.",
    "Even for operations of size zero, the pointer must not be pointing to deallocated memory."
]
dst.Dereferencable = ["The memory range of the given size (`count * size_of::<T>()` bytes) starting at the pointer must all be within the bounds of a single allocated object."]
dst.Aligned = ["`dst` must be properly aligned."]
dst.ConsistantLayout = [""]
dst.DualOwner = ["If `T` is not `Copy`, using both the values in the region beginning at `self` and the region beginning at `*dst` can violate memory safety. Note that assigning to `*dst` counts as a use because it will attempt to drop the value at `*dst`."]
dst.Untyped = ["The copy is untyped in the sense that data may be uninitialized or otherwise violate the requirements of `T`."]
dst.Leaked = [""]

[unsafe_fn."https://doc.rust-lang.org/core/ptr/fn.copy_nonoverlapping.html"]
row = 111
src.Allocated = [
    "A null pointer is never valid, not even for accesses of size zero.",
    "Even for operations of size zero, the pointer must not be pointing to deallocated memory."
]
src.Dereferencable = [
    "The memory range of the given size (`count * size_of::<T>()` bytes) starting at the pointer must all be within the bounds of a single allocated object.",
    "The region of memory beginning at `src` with a size of `count * size_of::<T>()` bytes must not overlap with the region of memory beginning at `dst` with the same size."
]
src.Aligned = ["`src` must be properly aligned."]
src.ConsistantLayout = [""]
dst.Allocated = [
    "A null pointer is never valid, not even for accesses of size zero.",
    "Even for operations of size zero, the pointer must not be pointing to deallocated memory."
]
dst.Dereferencable = [
    "The memory range of the given size (`count * size_of::<T>()` bytes) starting at the pointer must all be within the bounds of a single allocated object.",
    "The region of memory beginning at `src` with a size of `count * size_of::<T>()` bytes must not overlap with the region of memory beginning at `dst` with the same size."
]
dst.Aligned = ["`dst` must be properly aligned."]
dst.ConsistantLayout = [""]
dst.DualOwner = ["If `T` is not `Copy`, using both the values in the region beginning at `self` and the region beginning at `*dst` can violate memory safety. Note that assigning to `*dst` counts as a use because it will attempt to drop the value at `*dst`."]
dst.Untyped = ["The copy is untyped in the sense that data may be uninitialized or otherwise violate the requirements of `T`."]
dst.Leaked = [""]

[unsafe_fn."https://doc.rust-lang.org/core/ptr/fn.read_volatile.html"]
row = 112
src.Allocated = [
    "A null pointer is never valid, not even for accesses of size zero.",
    "Even for operations of size zero, the pointer must not be pointing to deallocated memory."
]
src.Initialized = ["`src` must point to a properly initialized value of type `T`."]
src.Dereferencable = ["The memory range of the given size starting at the pointer must all be within the bounds of a single allocated object."]
src.Aligned = ["`src` must be properly aligned."]
src.ConsistantLayout = [""]
retval.DualOwner = [
    "If `T` is not `Copy`, using both the returned value and the value at `*src` can violate memory safety. Note that assigning to `*src` counts as a use because it will attempt to drop the value at `*src`.",
    "However, storing non-`Copy` types in volatile memory is almost certainly incorrect."
]

[unsafe_fn."https://doc.rust-lang.org/core/ptr/fn.write_volatile.html"]
row = 113
dst.Allocated = [
    "A null pointer is never valid, not even for accesses of size zero.",
    "Even for operations of size zero, the pointer must not be pointing to deallocated memory."
]
dst.Dereferencable = ["The memory range of the given size starting at the pointer must all be within the bounds of a single allocated object."]
dst.Aligned = ["`dst` must be properly aligned."]
dst.ConsistantLayout = [""]
dst.Leaked = ["This is safe, but it could leak allocations or resources, so care should be taken not to overwrite an object that should be dropped."]

[unsafe_fn."https://doc.rust-lang.org/core/ptr/struct.NonNull.html#method.as_uninit_ref"]
row = 114
self.Dereferencable = ["The memory range of the given size starting at the pointer must all be within the bounds of a single allocated object."]
self.Aligned = ["The pointer must be properly aligned."]
self.ConsistantLayout = [""]
retval.AliasingMutating = ["You must enforce Rust's aliasing rules. In particular, while this reference exists, the memory the pointer points to must not get mutated."]
retval.Outliving = ["The returned lifetime `'a` is arbitrarily chosen and does not necessarily reflect the actual lifetime of the data."]

[unsafe_fn."https://doc.rust-lang.org/core/ptr/struct.NonNull.html#method.as_uninit_mut"]
row = 115
self.Allocated = ["Either the pointer is null or all of the following is true."]
self.Dereferencable = ["The memory range of the given size starting at the pointer must all be within the bounds of a single allocated object."]
self.Aligned = ["The pointer must be properly aligned."]
self.ConsistantLayout = [""]
retval.AliasingMutating = ["You must enforce Rust's aliasing rules. In particular, while this reference exists, the memory the pointer points to must not get accessed (read or written) through any other pointer."]
retval.Outliving = ["The returned lifetime `'a` is arbitrarily chosen and does not necessarily reflect the actual lifetime of the data."]

[unsafe_fn."https://doc.rust-lang.org/core/ptr/struct.NonNull.html#method.new_unchecked"]
row = 116
ptr.Allocated = ["`ptr` must be non-null."]

[unsafe_fn."https://doc.rust-lang.org/core/ptr/struct.NonNull.html#method.as_ref"]
row = 117
self.Initialized = ["The pointer must point to an initialized instance of `T`."]
self.Dereferencable = ["The memory range of the given size starting at the pointer must all be within the bounds of a single allocated object."]
self.Aligned = ["The pointer must be properly aligned."]
self.ConsistantLayout = [""]
retval.AliasingMutating = ["You must enforce Rust's aliasing rules. In particular, while this reference exists, the memory the pointer points to must not get mutated."]
retval.Outliving = ["The returned lifetime `'a` is arbitrarily chosen and does not necessarily reflect the actual lifetime of the data."]

[unsafe_fn."https://doc.rust-lang.org/core/ptr/struct.NonNull.html#method.as_mut"]
row = 118
self.Initialized = ["The pointer must point to an initialized instance of `T`."]
self.Dereferencable = ["The memory range of the given size starting at the pointer must all be within the bounds of a single allocated object."]
self.Aligned = ["The pointer must be properly aligned."]
self.ConsistantLayout = [""]
retval.AliasingMutating = ["You must enforce Rust's aliasing rules. In particular, while this reference exists, the memory the pointer points to must not get accessed (read or written) through any other pointer."]
retval.Outliving = ["The returned lifetime `'a` is arbitrarily chosen and does not necessarily reflect the actual lifetime of the data."]

[unsafe_fn."https://doc.rust-lang.org/core/ptr/struct.NonNull.html#method.offset"]
row = 119
self.ConstBound = ["The computed offset, in bytes, cannot overflow an `isize`."]
self.Dereferencable = ["Both the starting and resulting pointer must be either in bounds or one byte past the end of the same allocated object."]

[unsafe_fn."https://doc.rust-lang.org/core/ptr/struct.NonNull.html#method.byte_offset"]
row = 120
self.ConstBound = ["The computed offset, in bytes, cannot overflow an `isize`."]
self.Dereferencable = ["Both the starting and resulting pointer must be either in bounds or one byte past the end of the same allocated object."]

[unsafe_fn."https://doc.rust-lang.org/core/ptr/struct.NonNull.html#method.add"]
row = 121
self.ConstBound = ["The computed offset cannot exceed `isize::MAX` bytes."]
self.Dereferencable = ["Both the starting and resulting pointer must be either in bounds or one byte past the end of the same allocated object."]

[unsafe_fn."https://doc.rust-lang.org/core/ptr/struct.NonNull.html#method.byte_add"]
row = 122
self.ConstBound = ["The computed offset cannot exceed `isize::MAX` bytes."]
self.Dereferencable = ["Both the starting and resulting pointer must be either in bounds or one byte past the end of the same allocated object."]

[unsafe_fn."https://doc.rust-lang.org/core/ptr/struct.NonNull.html#method.sub"]
row = 123
self.ConstBound = ["The computed offset cannot exceed `isize::MAX` bytes."]
self.Dereferencable = ["Both the starting and resulting pointer must be either in bounds or one byte past the end of the same allocated object."]

[unsafe_fn."https://doc.rust-lang.org/core/ptr/struct.NonNull.html#method.byte_sub"]
row = 124
self.ConstBound = ["The computed offset cannot exceed `isize::MAX` bytes."]
self.Dereferencable = ["Both the starting and resulting pointer must be either in bounds or one byte past the end of the same allocated object."]

[unsafe_fn."https://doc.rust-lang.org/core/ptr/struct.NonNull.html#method.offset_from"]
row = 125
self.ConstBound = ["The distance between the pointers, in bytes, cannot overflow an `isize`."]
self.RelativeBound = ["The distance between the pointers, in bytes, must be an exact multiple of the size of `T`."]
self.Dereferencable = [
    "`self` must be either in bounds or one byte past the end of the same allocated object.",
    "Both pointers must be derived from a pointer to the same object."
]
self.ConsistantLayout = [""]
self.EST = ["This function panics if `T` is a Zero-Sized Type (ZST)."]
origin.Dereferencable = ["`origin` must be either in bounds or one byte past the end of the same allocated object."]
origin.ConsistantLayout = [""]

[unsafe_fn."https://doc.rust-lang.org/core/ptr/struct.NonNull.html#method.byte_offset_from"]
row = 126
self.ConstBound = ["The distance between the pointers, in bytes, cannot overflow an `isize`."]
self.RelativeBound = ["The distance between the pointers, in bytes, must be an exact multiple of the size of `T`."]
self.Dereferencable = [
    "`self` must be either in bounds or one byte past the end of the same allocated object.",
    "Both pointers must be derived from a pointer to the same object."
]
self.ConsistantLayout = [""]
self.EST = ["This function panics if `T` is a Zero-Sized Type (ZST)."]
origin.Dereferencable = ["`origin` must be either in bounds or one byte past the end of the same allocated object."]
origin.ConsistantLayout = [""]

[unsafe_fn."https://doc.rust-lang.org/core/ptr/struct.NonNull.html#method.sub_ptr"]
row = 127
self.ConstBound = ["The distance between the pointers, in bytes, cannot overflow an `isize`."]
self.RelativeBound = [
    "The distance between the pointers, in bytes, must be an exact multiple of the size of `T`.",
    "The distance between the pointers must be non-negative (`self` >= `origin`)."
]
self.Dereferencable = [
    "`self` must be either in bounds or one byte past the end of the same allocated object.",
    "Both pointers must be derived from a pointer to the same object."
]
self.ConsistantLayout = [""]
self.EST = ["This function panics if `T` is a Zero-Sized Type (ZST)."]
origin.Dereferencable = ["`origin` must be either in bounds or one byte past the end of the same allocated object."]
origin.ConsistantLayout = [""]

[unsafe_fn."https://doc.rust-lang.org/core/ptr/struct.NonNull.html#method.read"]
row = 128
self.Initialized = ["`self` must point to a properly initialized value of type `T`."]
self.Dereferencable = ["The memory range of the given size starting at the pointer must all be within the bounds of a single allocated object."]
self.Aligned = ["`self` must be properly aligned."]
self.ConsistantLayout = [""]
retval.DualOwner = ["If `T` is not `Copy`, using both the returned value and the value at `self` can violate memory safety. Note that assigning to `self` counts as a use because it will attempt to drop the value at `self`."]

[unsafe_fn."https://doc.rust-lang.org/core/ptr/struct.NonNull.html#method.read_volatile"]
row = 129
self.Initialized = ["`self` must point to a properly initialized value of type `T`."]
self.Dereferencable = ["The memory range of the given size starting at the pointer must all be within the bounds of a single allocated object."]
self.Aligned = ["`self` must be properly aligned."]
self.ConsistantLayout = [""]
retval.DualOwner = [
    "If `T` is not `Copy`, using both the returned value and the value at `self` can violate memory safety. Note that assigning to `self` counts as a use because it will attempt to drop the value at `self`.",
    "However, storing non-`Copy` types in volatile memory is almost certainly incorrect."
]

[unsafe_fn."https://doc.rust-lang.org/core/ptr/struct.NonNull.html#method.read_unaligned"]
row = 130
self.Initialized = ["`self` must point to a properly initialized value of type `T`."]
self.Dereferencable = ["The memory range of the given size starting at the pointer must all be within the bounds of a single allocated object."]
self.ConsistantLayout = [""]
retval.DualOwner = ["If `T` is not `Copy`, using both the returned value and the value at `self` can violate memory safety. Note that assigning to `self` counts as a use because it will attempt to drop the value at `self`."]

[unsafe_fn."https://doc.rust-lang.org/core/ptr/struct.NonNull.html#method.copy_to"]
row = 131
self.Dereferencable = ["The memory range of the given size (`count * size_of::<T>()` bytes) starting at the pointer must all be within the bounds of a single allocated object."]
self.Aligned = ["`self` must be properly aligned."]
self.ConsistantLayout = [""]
dest.Dereferencable = ["The memory range of the given size (`count * size_of::<T>()` bytes) starting at the pointer must all be within the bounds of a single allocated object."]
dest.Aligned = ["`dest` must be properly aligned."]
dest.ConsistantLayout = [""]
dest.DualOwner = ["If `T` is not `Copy`, using both the values in the region beginning at `self` and the region beginning at `*dest` can violate memory safety. Note that assigning to `*dest` counts as a use because it will attempt to drop the value at `*dest`."]
dest.Untyped = ["The copy is untyped in the sense that data may be uninitialized or otherwise violate the requirements of `T`."]
dest.Leaked = [""]

[unsafe_fn."https://doc.rust-lang.org/core/ptr/struct.NonNull.html#method.copy_to_nonoverlapping"]
row = 132
self.Dereferencable = [
    "The memory range of the given size (`count * size_of::<T>()` bytes) starting at the pointer must all be within the bounds of a single allocated object.",
    "The region of memory beginning at `self` with a size of `count * size_of::<T>()` bytes must not overlap with the region of memory beginning at `dest` with the same size."
]
self.Aligned = ["`self` must be properly aligned."]
self.ConsistantLayout = [""]
dest.Dereferencable = [
    "The memory range of the given size (`count * size_of::<T>()` bytes) starting at the pointer must all be within the bounds of a single allocated object.",
    "The region of memory beginning at `self` with a size of `count * size_of::<T>()` bytes must not overlap with the region of memory beginning at `dest` with the same size."
]
dest.Aligned = ["`dest` must be properly aligned."]
dest.ConsistantLayout = [""]
dest.DualOwner = ["If `T` is not `Copy`, using both the values in the region beginning at `self` and the region beginning at `*dest` can violate memory safety. Note that assigning to `*dest` counts as a use because it will attempt to drop the value at `*dest`."]
dest.Untyped = ["The copy is untyped in the sense that data may be uninitialized or otherwise violate the requirements of `T`."]
dest.Leaked = [""]

[unsafe_fn."https://doc.rust-lang.org/core/ptr/struct.NonNull.html#method.copy_from"]
row = 133
self.Dereferencable = ["The memory range of the given size (`count * size_of::<T>()` bytes) starting at the pointer must all be within the bounds of a single allocated object."]
self.Aligned = ["`self` must be properly aligned."]
self.ConsistantLayout = [""]
self.Leaked = [""]
src.Dereferencable = ["The memory range of the given size (`count * size_of::<T>()` bytes) starting at the pointer must all be within the bounds of a single allocated object."]
src.Aligned = ["`src` must be properly aligned."]
src.ConsistantLayout = [""]
src.DualOwner = ["If `T` is not `Copy`, using both the values in the region beginning at `self` and the region beginning at `*src` can violate memory safety. Note that assigning to `*src` counts as a use because it will attempt to drop the value at `*src`."]
src.Untyped = ["The copy is untyped in the sense that data may be uninitialized or otherwise violate the requirements of `T`."]

[unsafe_fn."https://doc.rust-lang.org/core/ptr/struct.NonNull.html#method.copy_from_nonoverlapping"]
row = 134
self.Dereferencable = [
    "The memory range of the given size (`count * size_of::<T>()` bytes) starting at the pointer must all be within the bounds of a single allocated object.",
    "The region of memory beginning at `self` with a size of `count * size_of::<T>()` bytes must not overlap with the region of memory beginning at `src` with the same size."
]
self.Aligned = ["`self` must be properly aligned."]
self.ConsistantLayout = [""]
self.Leaked = [""]
src.Dereferencable = [
    "The memory range of the given size (`count * size_of::<T>()` bytes) starting at the pointer must all be within the bounds of a single allocated object.",
    "The region of memory beginning at `self` with a size of `count * size_of::<T>()` bytes must not overlap with the region of memory beginning at `src` with the same size."
]
src.Aligned = ["`src` must be properly aligned."]
src.ConsistantLayout = [""]
src.DualOwner = ["If `T` is not `Copy`, using both the values in the region beginning at `self` and the region beginning at `*src` can violate memory safety. Note that assigning to `*src` counts as a use because it will attempt to drop the value at `*src`."]
src.Untyped = ["The copy is untyped in the sense that data may be uninitialized or otherwise violate the requirements of `T`."]

[unsafe_fn."https://doc.rust-lang.org/core/ptr/struct.NonNull.html#method.drop_in_place"]
row = 135
self.Initialized = ["The value `self` points to must be valid for dropping, which may mean it must uphold additional invariants. These invariants depend on the type of the value being dropped."]
self.Dereferencable = ["The memory range of the given size starting at the pointer must all be within the bounds of a single allocated object."]
self.Aligned = [
    "`self` must be properly aligned, even if `T` has size 0.",
    "Unaligned values cannot be dropped in place, they must be copied to an aligned location first using `ptr::read_unaligned`."
]
self.ConsistantLayout = [""]
self.Freed = ["Executes the destructor (if any) of the pointed-to value."]

[unsafe_fn."https://doc.rust-lang.org/core/ptr/struct.NonNull.html#method.write"]
row = 136
self.Dereferencable = ["The memory range of the given size starting at the pointer must all be within the bounds of a single allocated object."]
self.Aligned = ["`self` must be properly aligned."]
self.ConsistantLayout = [""]
self.Leaked = ["This is safe, but it could leak allocations or resources, so care should be taken not to overwrite an object that should be dropped."]

[unsafe_fn."https://doc.rust-lang.org/core/ptr/struct.NonNull.html#method.write_bytes"]
row = 137
self.Dereferencable = ["The memory range of the given size (`count * size_of::<T>()` bytes) starting at the pointer must all be within the bounds of a single allocated object."]
self.Aligned = ["`self` must be properly aligned."]
self.ConsistantLayout = [""]
self.Untyped = ["Additionally, note that changing `self` in this way can easily lead to undefined behavior (UB) later if the written bytes are not a valid representation of some `T`."]
self.Leaked = [""]

[unsafe_fn."https://doc.rust-lang.org/core/ptr/struct.NonNull.html#method.write_volatile"]
row = 138
self.Dereferencable = ["The memory range of the given size starting at the pointer must all be within the bounds of a single allocated object."]
self.Aligned = ["`self` must be properly aligned."]
self.ConsistantLayout = [""]
self.Leaked = ["This is safe, but it could leak allocations or resources, so care should be taken not to overwrite an object that should be dropped."]

[unsafe_fn."https://doc.rust-lang.org/core/ptr/struct.NonNull.html#method.write_unaligned"]
row = 139
self.Dereferencable = ["The memory range of the given size starting at the pointer must all be within the bounds of a single allocated object."]
self.ConsistantLayout = [""]
self.Leaked = ["This is safe, but it could leak allocations or resources, so care should be taken not to overwrite an object that should be dropped."]

[unsafe_fn."https://doc.rust-lang.org/core/ptr/struct.NonNull.html#method.replace"]
row = 140
self.Initialized = ["`self` must point to a properly initialized value of type `T`."]
self.Dereferencable = ["The memory range of the given size starting at the pointer must all be within the bounds of a single allocated object."]
self.Aligned = ["`self` must be properly aligned."]
self.ConsistantLayout = [""]
src.Leaked = ["Neither value is dropped."]

[unsafe_fn."https://doc.rust-lang.org/core/ptr/struct.NonNull.html#method.swap"]
row = 141
self.Dereferencable = ["The memory range of the given size starting at the pointer must all be within the bounds of a single allocated object."]
selfx.Aligned = ["`self` must be properly aligned."]
self.ConsistantLayout = [""]
self.Untyped = ["The operation is untyped in the sense that data may be uninitialized or otherwise violate the requirements of `T`."]
with.Dereferencable = ["The memory range of the given size starting at the pointer must all be within the bounds of a single allocated object."]
with.Aligned = ["`with` must be properly aligned."]
with.ConsistantLayout = [""]
with.Untyped = ["The operation is untyped in the sense that data may be uninitialized or otherwise violate the requirements of `T`."]

[unsafe_fn."https://doc.rust-lang.org/core/ptr/struct.NonNull.html#method.as_uninit_slice"]
row = 142
self.ConstBound = ["The total size `ptr.len() * mem::size_of::<T>()` of the slice must be no larger than `isize::MAX`."]
self.Allocated = ["Either the pointer is null or all of the following is true."]
self.Dereferencable = ["The entire memory range of this slice (`ptr.len() * mem::size_of::<T>()` bytes) must be contained within a single allocated object! Slices can never span across multiple allocated objects."]
self.Aligned = ["The pointer must be aligned even for zero-length slices."]
self.ConsistantLayout = [""]
retval.AliasingMutating = ["You must enforce Rust's aliasing rules. In particular, while this reference exists, the memory the pointer points to must not get mutated."]
retval.Outliving = ["The returned lifetime `'a` is arbitrarily chosen and does not necessarily reflect the actual lifetime of the data."]

[unsafe_fn."https://doc.rust-lang.org/core/ptr/struct.NonNull.html#method.as_uninit_slice_mut"]
row = 143
self.ConstBound = ["The total size `ptr.len() * mem::size_of::<T>()` of the slice must be no larger than `isize::MAX`."]
self.Allocated = ["Either the pointer is null or all of the following is true."]
self.Dereferencable = ["The entire memory range of this slice (`ptr.len() * mem::size_of::<T>()` bytes) must be contained within a single allocated object! Slices can never span across multiple allocated objects."]
self.Aligned = ["The pointer must be aligned even for zero-length slices."]
self.ConsistantLayout = [""]
retval.AliasingMutating = ["You must enforce Rust's aliasing rules. In particular, while this reference exists, the memory the pointer points to must not get accessed (read or written) through any other pointer."]
retval.Outliving = ["The returned lifetime `'a` is arbitrarily chosen and does not necessarily reflect the actual lifetime of the data."]

[unsafe_fn."https://doc.rust-lang.org/core/ptr/struct.NonNull.html#method.get_unchecked_mut"]
row = 144
self.Dereferencable = ["When `self` is not dereferenceable is undefined behavior even if the resulting pointer is not used."]
index.ConstBound = ["Calling this method with an out-of-bounds index is undefined behavior even if the resulting pointer is not used."]

[unsafe_fn."https://doc.rust-lang.org/core/slice/fn.from_raw_parts.html#"]
row = 145
data.Allocated = ["`data` must be non-null even for zero-length slices."]
data.Initialized = ["`data` must point to `len` consecutive properly initialized values of type `T`."]
data.Dereferencable = ["The entire memory range (`len * mem::size_of::<T>()` bytes) of this slice must be contained within a single allocated object! Slices can never span across multiple allocated objects."]
data.Aligned = ["`data` must be aligned even for zero-length slices."]
data.ConsistantLayout = [""]
len.ConstBound = ["The total size `len * mem::size_of::<T>()` of the slice must be no larger than `isize::MAX`."]
retval.AliasingMutating = ["The memory referenced by the returned slice must not be mutated for the duration of lifetime `'a`."]
retval.Outliving = ["The lifetime for the returned slice is inferred from its usage. To prevent accidental misuse, it's suggested to tie the lifetime to whichever source lifetime is safe in the context."]

[unsafe_fn."https://doc.rust-lang.org/core/slice/fn.from_raw_parts_mut.html#"]
row = 146
data.Allocated = ["`data` must be non-null even for zero-length slices."]
data.Initialized = ["`data` must point to `len` consecutive properly initialized values of type `T`."]
data.Dereferencable = ["The entire memory range (`len * mem::size_of::<T>()` bytes) of this slice must be contained within a single allocated object! Slices can never span across multiple allocated objects."]
data.Aligned = ["`data` must be aligned even for zero-length slices."]
data.ConsistantLayout = [""]
len.ConstBound = ["The total size `len * mem::size_of::<T>()` of the slice must be no larger than `isize::MAX`."]
retval.AliasingMutating = ["The memory referenced by the returned slice must not be mutated for the duration of lifetime `'a`."]
retval.Outliving = ["The lifetime for the returned slice is inferred from its usage. To prevent accidental misuse, it's suggested to tie the lifetime to whichever source lifetime is safe in the context."]

[unsafe_fn."https://doc.rust-lang.org/core/slice/fn.from_ptr_range.html#"]
row = 147
self.ConstBound = ["The total length of the `range` must be no larger than `isize::MAX`."]
self.Allocated = [
    "The `start` pointer of the range must be non-null even for zero-length slices.",
    "The `end` pointer of the range must be non-null even for zero-length slices."
]
self.Initialized = ["The range must contain `N` consecutive properly initialized values of type `T`."]
self.Dereferencable = ["The entire memory range of this slice must be contained within a single allocated object! Slices can never span across multiple allocated objects."]
self.Aligned = [
    "The `start` pointer of the range must be properly aligned to the first element of a slice.",
    "The `end` pointer of the range must be to one past the last element."
]
self.ConsistantLayout = [""]
self.EST = ["This function panics if `T` is a Zero-Sized Type (ZST)."]
retval.AliasingMutating = ["The memory referenced by the returned slice must not be mutated for the duration of lifetime `'a`."]
retval.Outliving = ["The lifetime for the returned slice is inferred from its usage. To prevent accidental misuse, it's suggested to tie the lifetime to whichever source lifetime is safe in the context."]

[unsafe_fn."https://doc.rust-lang.org/core/slice/fn.from_mut_ptr_range.html#"]
row = 148
self.ConstBound = ["The total length of the `range` must be no larger than `isize::MAX`."]
self.Allocated = [
    "The `start` pointer of the range must be non-null even for zero-length slices.",
    "The `end` pointer of the range must be non-null even for zero-length slices."
]
self.Initialized = ["The range must contain `N` consecutive properly initialized values of type `T`."]
self.Dereferencable = ["The entire memory range of this slice must be contained within a single allocated object! Slices can never span across multiple allocated objects."]
self.Aligned = [
    "The `start` pointer of the range must be properly aligned to the first element of a slice.",
    "The `end` pointer of the range must be to one past the last element."
]
self.ConsistantLayout = [""]
self.EST = ["This function panics if `T` is a Zero-Sized Type (ZST)."]
retval.AliasingMutating = ["The memory referenced by the returned slice must not be mutated for the duration of lifetime `'a`."]
retval.Outliving = ["The lifetime for the returned slice is inferred from its usage. To prevent accidental misuse, it's suggested to tie the lifetime to whichever source lifetime is safe in the context."]

[unsafe_fn."https://doc.rust-lang.org/core/slice/trait.SliceIndex.html#tymethod.get_unchecked"]
row = 149
self.ConstBound = ["Calling this method with an out-of-bounds index is undefined behavior even if the resulting reference is not used."]
slice.Allocated = ["A dangling slice pointer is undefined behavior even if the resulting reference is not used."]
slice.Dereferencable = ["When `slice` is not dereferenceable is undefined behavior even if the resulting pointer is not used."]

[unsafe_fn."https://doc.rust-lang.org/core/slice/trait.SliceIndex.html#tymethod.get_unchecked_mut"]
row = 150
self.ConstBound = ["Calling this method with an out-of-bounds index is undefined behavior even if the resulting reference is not used."]
slice.Allocated = ["A dangling slice pointer is undefined behavior even if the resulting reference is not used."]
slice.Dereferencable = ["When `slice` is not dereferenceable is undefined behavior even if the resulting pointer is not used."]

[unsafe_fn."https://doc.rust-lang.org/core/primitive.usize.html#method.get_unchecked"]
row = 151
self.ConstBound = ["Calling this method with an out-of-bounds index is undefined behavior even if the resulting reference is not used."]
slice.Allocated = ["A dangling slice pointer is undefined behavior even if the resulting reference is not used."]
slice.Dereferencable = ["When `slice` is not dereferenceable is undefined behavior even if the resulting pointer is not used."]

[unsafe_fn."https://doc.rust-lang.org/core/primitive.usize.html#method.get_unchecked_mut"]
row = 152
self.ConstBound = ["Calling this method with an out-of-bounds index is undefined behavior even if the resulting reference is not used."]
slice.Allocated = ["A dangling slice pointer is undefined behavior even if the resulting reference is not used."]
slice.Dereferencable = ["When `slice` is not dereferenceable is undefined behavior even if the resulting pointer is not used."]

[unsafe_fn."https://doc.rust-lang.org/core/ops/struct.Range.html#method.get_unchecked-1"]
row = 153
self.ConstBound = ["Calling this method with an out-of-bounds index is undefined behavior even if the resulting reference is not used."]
slice.Allocated = ["A dangling slice pointer is undefined behavior even if the resulting reference is not used."]
slice.Dereferencable = ["When `slice` is not dereferenceable is undefined behavior even if the resulting pointer is not used."]

[unsafe_fn."https://doc.rust-lang.org/core/ops/struct.Range.html#method.get_unchecked_mut-1"]
row = 154
self.ConstBound = ["Calling this method with an out-of-bounds index is undefined behavior even if the resulting reference is not used."]
slice.Allocated = ["A dangling slice pointer is undefined behavior even if the resulting reference is not used."]
slice.Dereferencable = ["When `slice` is not dereferenceable is undefined behavior even if the resulting pointer is not used."]

[unsafe_fn."https://doc.rust-lang.org/core/ops/struct.RangeTo.html#method.get_unchecked"]
row = 155
self.ConstBound = ["Calling this method with an out-of-bounds index is undefined behavior even if the resulting reference is not used."]
slice.Allocated = ["A dangling slice pointer is undefined behavior even if the resulting reference is not used."]
slice.Dereferencable = ["When `slice` is not dereferenceable is undefined behavior even if the resulting pointer is not used."]

[unsafe_fn."https://doc.rust-lang.org/core/ops/struct.RangeTo.html#method.get_unchecked_mut"]
row = 156
self.ConstBound = ["Calling this method with an out-of-bounds index is undefined behavior even if the resulting reference is not used."]
slice.Allocated = ["A dangling slice pointer is undefined behavior even if the resulting reference is not used."]
slice.Dereferencable = ["When `slice` is not dereferenceable is undefined behavior even if the resulting pointer is not used."]

[unsafe_fn."https://doc.rust-lang.org/core/ops/struct.RangeFrom.html#method.get_unchecked"]
row = 157
self.ConstBound = ["Calling this method with an out-of-bounds index is undefined behavior even if the resulting reference is not used."]
slice.Allocated = ["A dangling slice pointer is undefined behavior even if the resulting reference is not used."]
slice.Dereferencable = ["When `slice` is not dereferenceable is undefined behavior even if the resulting pointer is not used."]

[unsafe_fn."https://doc.rust-lang.org/core/ops/struct.RangeFrom.html#method.get_unchecked_mut"]
row = 158
self.ConstBound = ["Calling this method with an out-of-bounds index is undefined behavior even if the resulting reference is not used."]
slice.Allocated = ["A dangling slice pointer is undefined behavior even if the resulting reference is not used."]
slice.Dereferencable = ["When `slice` is not dereferenceable is undefined behavior even if the resulting pointer is not used."]

[unsafe_fn."https://doc.rust-lang.org/core/ops/struct.RangeFull.html#method.get_unchecked-1"]
row = 159
self.ConstBound = ["Calling this method with an out-of-bounds index is undefined behavior even if the resulting reference is not used."]
slice.Allocated = ["A dangling slice pointer is undefined behavior even if the resulting reference is not used."]
slice.Dereferencable = ["When `slice` is not dereferenceable is undefined behavior even if the resulting pointer is not used."]

[unsafe_fn."https://doc.rust-lang.org/core/ops/struct.RangeFull.html#method.get_unchecked_mut-1"]
row = 160
self.ConstBound = ["Calling this method with an out-of-bounds index is undefined behavior even if the resulting reference is not used."]
slice.Allocated = ["A dangling slice pointer is undefined behavior even if the resulting reference is not used."]
slice.Dereferencable = ["When `slice` is not dereferenceable is undefined behavior even if the resulting pointer is not used."]

[unsafe_fn."https://doc.rust-lang.org/core/ops/struct.RangeInclusive.html#method.get_unchecked-1"]
row = 161
self.ConstBound = ["Calling this method with an out-of-bounds index is undefined behavior even if the resulting reference is not used."]
slice.Allocated = ["A dangling slice pointer is undefined behavior even if the resulting reference is not used."]
slice.Dereferencable = ["When `slice` is not dereferenceable is undefined behavior even if the resulting pointer is not used."]

[unsafe_fn."https://doc.rust-lang.org/core/ops/struct.RangeInclusive.html#method.get_unchecked_mut-1"]
row = 162
self.ConstBound = ["Calling this method with an out-of-bounds index is undefined behavior even if the resulting reference is not used."]
slice.Allocated = ["A dangling slice pointer is undefined behavior even if the resulting reference is not used."]
slice.Dereferencable = ["When `slice` is not dereferenceable is undefined behavior even if the resulting pointer is not used."]

[unsafe_fn."https://doc.rust-lang.org/core/ops/struct.RangeToInclusive.html#method.get_unchecked-1"]
row = 163
self.ConstBound = ["Calling this method with an out-of-bounds index is undefined behavior even if the resulting reference is not used."]
slice.Allocated = ["A dangling slice pointer is undefined behavior even if the resulting reference is not used."]
slice.Dereferencable = ["When `slice` is not dereferenceable is undefined behavior even if the resulting pointer is not used."]

[unsafe_fn."https://doc.rust-lang.org/core/ops/struct.RangeToInclusive.html#method.get_unchecked_mut-1"]
row = 164
self.ConstBound = ["Calling this method with an out-of-bounds index is undefined behavior even if the resulting reference is not used."]
slice.Allocated = ["A dangling slice pointer is undefined behavior even if the resulting reference is not used."]
slice.Dereferencable = ["When `slice` is not dereferenceable is undefined behavior even if the resulting pointer is not used."]

[unsafe_fn."https://doc.rust-lang.org/core/primitive.tuple.html#method.get_unchecked"]
row = 165
self.ConstBound = ["Calling this method with an out-of-bounds index is undefined behavior even if the resulting reference is not used."]
slice.Allocated = ["A dangling slice pointer is undefined behavior even if the resulting reference is not used."]
slice.Dereferencable = ["When `slice` is not dereferenceable is undefined behavior even if the resulting pointer is not used."]

[unsafe_fn."https://doc.rust-lang.org/core/primitive.tuple.html#method.get_unchecked_mut"]
row = 166
self.ConstBound = ["Calling this method with an out-of-bounds index is undefined behavior even if the resulting reference is not used."]
slice.Allocated = ["A dangling slice pointer is undefined behavior even if the resulting reference is not used."]
slice.Dereferencable = ["When `slice` is not dereferenceable is undefined behavior even if the resulting pointer is not used."]

[unsafe_fn."https://doc.rust-lang.org/core/primitive.slice.html#method.get_unchecked"]
row = 167
index.ConstBound = ["Calling this method with an out-of-bounds index is undefined behavior even if the resulting reference is not used."]

[unsafe_fn."https://doc.rust-lang.org/core/primitive.slice.html#method.get_many_unchecked_mut"]
row = 168
index.ConstBound = ["Calling this method with an out-of-bounds index is undefined behavior even if the resulting reference is not used."]

[unsafe_fn."https://doc.rust-lang.org/core/primitive.slice.html#method.swap_unchecked"]
row = 169
a.ConstBound = ["Calling this method with an out-of-bounds index is undefined behavior. The caller has to ensure that `a < self.len()`."]
b.ConstBound = ["Calling this method with an out-of-bounds index is undefined behavior. The caller has to ensure that `b < self.len()`."]

[unsafe_fn."https://doc.rust-lang.org/core/primitive.slice.html#method.as_chunks_unchecked"]
row = 170
self.ConstBound = [
    "The slice splits exactly into `N`-element chunks (aka `self.len() % N == 0`).",
    "`N != 0`."
]

[unsafe_fn."https://doc.rust-lang.org/core/primitive.slice.html#method.as_chunks_unchecked_mut"]
row = 171
self.ConstBound = [
    "The slice splits exactly into `N`-element chunks (aka `self.len() % N == 0`).",
    "`N != 0`."
]

[unsafe_fn."https://doc.rust-lang.org/core/primitive.slice.html#method.split_at_unchecked"]
row = 172
mid.ConstBound = ["Calling this method with an out-of-bounds index is undefined behavior even if the resulting reference is not used. The caller has to ensure that `0 <= mid <= self.len()`."]

[unsafe_fn."https://doc.rust-lang.org/core/primitive.slice.html#method.split_at_mut_unchecked"]
row = 173
mid.ConstBound = ["Calling this method with an out-of-bounds index is undefined behavior even if the resulting reference is not used. The caller has to ensure that `0 <= mid <= self.len()`."]

[unsafe_fn."https://doc.rust-lang.org/core/primitive.slice.html#method.align_to"]
row = 174
RelativeBound = [""]
Initialized = [""]
Aligned = [""]
ConsistantLayout = [""]
self.EST = ["This method has no purpose when either input element `T` or output element `U` are zero-sized and will return the original slice without splitting anything."]
AliasingMutating = [""]
Outliving = [""]

[unsafe_fn."https://doc.rust-lang.org/core/primitive.slice.html#method.align_to_mut"]
row = 175
RelativeBound = [""]
Initialized = [""]
Aligned = [""]
ConsistantLayout = [""]
self.EST = ["This method has no purpose when either input element `T` or output element `U` are zero-sized and will return the original slice without splitting anything."]
AliasingMutating = [""]
Outliving = [""]

[unsafe_fn."https://doc.rust-lang.org/core/str/fn.from_utf8_unchecked.html"]
row = 176
v.Encoding = ["The bytes passed in must be valid UTF-8."]

[unsafe_fn."https://doc.rust-lang.org/core/str/fn.from_utf8_unchecked_mut.html"]
row = 177
v.Encoding = ["The bytes passed in must be valid UTF-8."]

[unsafe_fn."https://doc.rust-lang.org/core/primitive.str.html#method.as_bytes_mut"]
row = 178
self.Encoding = ["The caller must ensure that the content of the slice is valid UTF-8 before the borrow ends and the underlying `str` is used."]

[unsafe_fn."https://doc.rust-lang.org/core/primitive.str.html#method.get_unchecked"]
row = 179
i.ConstBound = [
    "The starting index must not exceed the ending index.",
    "Indexes must be within bounds of the original slice."
]
i.Encoding = ["Indexes must lie on UTF-8 sequence boundaries."]

[unsafe_fn."https://doc.rust-lang.org/core/primitive.str.html#method.get_unchecked_mut"]
row = 180
i.ConstBound = [
    "The starting index must not exceed the ending index.",
    "Indexes must be within bounds of the original slice."
]
i.Encoding = ["Indexes must lie on UTF-8 sequence boundaries."]

[unsafe_fn."https://doc.rust-lang.org/core/primitive.str.html#method.slice_unchecked"]
row = 181
begin.ConstBound = [
    "`begin` must not exceed `end`.",
    "`begin` must be byte positions within the string slice."
]
begin.Encoding = ["`begin` must lie on UTF-8 sequence boundaries."]
end.ConstBound = ["`end` must be byte positions within the string slice."]
end.Encoding = ["`end` must lie on UTF-8 sequence boundaries."]

[unsafe_fn."https://doc.rust-lang.org/core/primitive.str.html#method.slice_mut_unchecked"]
row = 182
begin.ConstBound = [
    "`begin` must not exceed `end`.",
    "`begin` must be byte positions within the string slice."
]
begin.Encoding = ["`begin` must lie on UTF-8 sequence boundaries."]
end.ConstBound = ["`end` must be byte positions within the string slice."]
end.Encoding = ["`end` must lie on UTF-8 sequence boundaries."]
[unsafe_fn."https://doc.rust-lang.org/core/ops/struct.RangeFull.html#method.get_unchecked"]
row = 183
self.ConstBound = ["Calling this method with an out-of-bounds index is undefined behavior even if the resulting reference is not used."]
slice.Allocated = ["A dangling slice pointer is undefined behavior even if the resulting reference is not used."]
slice.Dereferencable = ["When `slice` is not dereferenceable is undefined behavior even if the resulting pointer is not used."]

[unsafe_fn."https://doc.rust-lang.org/core/ops/struct.RangeFull.html#method.get_unchecked_mut"]
row = 184
self.ConstBound = ["Calling this method with an out-of-bounds index is undefined behavior even if the resulting reference is not used."]
slice.Allocated = ["A dangling slice pointer is undefined behavior even if the resulting reference is not used."]
slice.Dereferencable = ["When `slice` is not dereferenceable is undefined behavior even if the resulting pointer is not used."]

[unsafe_fn."https://doc.rust-lang.org/core/ops/struct.Range.html#method.get_unchecked"]
row = 185
self.ConstBound = ["Calling this method with an out-of-bounds index is undefined behavior even if the resulting reference is not used."]
slice.Allocated = ["A dangling slice pointer is undefined behavior even if the resulting reference is not used."]
slice.Dereferencable = ["When `slice` is not dereferenceable is undefined behavior even if the resulting pointer is not used."]

[unsafe_fn."https://doc.rust-lang.org/core/ops/struct.Range.html#method.get_unchecked_mut"]
row = 186
self.ConstBound = ["Calling this method with an out-of-bounds index is undefined behavior even if the resulting reference is not used."]
slice.Allocated = ["A dangling slice pointer is undefined behavior even if the resulting reference is not used."]
slice.Dereferencable = ["When `slice` is not dereferenceable is undefined behavior even if the resulting pointer is not used."]

[unsafe_fn."https://doc.rust-lang.org/core/ops/struct.RangeTo.html#method.get_unchecked-1"]
row = 187
self.ConstBound = ["Calling this method with an out-of-bounds index is undefined behavior even if the resulting reference is not used."]
slice.Allocated = ["A dangling slice pointer is undefined behavior even if the resulting reference is not used."]
slice.Dereferencable = ["When `slice` is not dereferenceable is undefined behavior even if the resulting pointer is not used."]

[unsafe_fn."https://doc.rust-lang.org/core/ops/struct.RangeTo.html#method.get_unchecked_mut-1"]
row = 188
self.ConstBound = ["Calling this method with an out-of-bounds index is undefined behavior even if the resulting reference is not used."]
slice.Allocated = ["A dangling slice pointer is undefined behavior even if the resulting reference is not used."]
slice.Dereferencable = ["When `slice` is not dereferenceable is undefined behavior even if the resulting pointer is not used."]

[unsafe_fn."https://doc.rust-lang.org/core/ops/struct.RangeFrom.html#method.get_unchecked-1"]
row = 189
self.ConstBound = ["Calling this method with an out-of-bounds index is undefined behavior even if the resulting reference is not used."]
slice.Allocated = ["A dangling slice pointer is undefined behavior even if the resulting reference is not used."]
slice.Dereferencable = ["When `slice` is not dereferenceable is undefined behavior even if the resulting pointer is not used."]

[unsafe_fn."https://doc.rust-lang.org/core/ops/struct.RangeFrom.html#method.get_unchecked_mut-1"]
row = 190
self.ConstBound = ["Calling this method with an out-of-bounds index is undefined behavior even if the resulting reference is not used."]
slice.Allocated = ["A dangling slice pointer is undefined behavior even if the resulting reference is not used."]
slice.Dereferencable = ["When `slice` is not dereferenceable is undefined behavior even if the resulting pointer is not used."]

[unsafe_fn."https://doc.rust-lang.org/core/ops/struct.RangeInclusive.html#method.get_unchecked"]
row = 191
self.ConstBound = ["Calling this method with an out-of-bounds index is undefined behavior even if the resulting reference is not used."]
slice.Allocated = ["A dangling slice pointer is undefined behavior even if the resulting reference is not used."]
slice.Dereferencable = ["When `slice` is not dereferenceable is undefined behavior even if the resulting pointer is not used."]

[unsafe_fn."https://doc.rust-lang.org/core/ops/struct.RangeInclusive.html#method.get_unchecked_mut"]
row = 192
self.ConstBound = ["Calling this method with an out-of-bounds index is undefined behavior even if the resulting reference is not used."]
slice.Allocated = ["A dangling slice pointer is undefined behavior even if the resulting reference is not used."]
slice.Dereferencable = ["When `slice` is not dereferenceable is undefined behavior even if the resulting pointer is not used."]

[unsafe_fn."https://doc.rust-lang.org/core/ops/struct.RangeToInclusive.html#method.get_unchecked"]
row = 193
self.ConstBound = ["Calling this method with an out-of-bounds index is undefined behavior even if the resulting reference is not used."]
slice.Allocated = ["A dangling slice pointer is undefined behavior even if the resulting reference is not used."]
slice.Dereferencable = ["When `slice` is not dereferenceable is undefined behavior even if the resulting pointer is not used."]

[unsafe_fn."https://doc.rust-lang.org/core/ops/struct.RangeToInclusive.html#method.get_unchecked_mut"]
row = 194
self.ConstBound = ["Calling this method with an out-of-bounds index is undefined behavior even if the resulting reference is not used."]
slice.Allocated = ["A dangling slice pointer is undefined behavior even if the resulting reference is not used."]
slice.Dereferencable = ["When `slice` is not dereferenceable is undefined behavior even if the resulting pointer is not used."]

[unsafe_fn."https://doc.rust-lang.org/core/task/struct.Waker.html#method.from_raw"]
row = 195
Allocated = [""]
Initialized = [""]
Dereferencable = [""]
ConsistantLayout = [""]
Unreachable = [""]
Thread = [""]

[unsafe_fn."https://doc.rust-lang.org/core/hint/fn.unreachable_unchecked.html"]
row = 196
Unreachable = [""]

[unsafe_fn."https://doc.rust-lang.org/core/any/trait.Any.html#method.downcast_ref_unchecked"]
row = 197
ConsistantLayout = [""]

[unsafe_fn."https://doc.rust-lang.org/core/any/trait.Any.html#method.downcast_mut_unchecked"]
row = 198
ConsistantLayout = [""]

[unsafe_fn."https://doc.rust-lang.org/core/any/trait.Any.html#method.downcast_ref_unchecked-1"]
row = 199
ConsistantLayout = [""]

[unsafe_fn."https://doc.rust-lang.org/core/any/trait.Any.html#method.downcast_mut_unchecked-1"]
row = 200
ConsistantLayout = [""]

[unsafe_fn."https://doc.rust-lang.org/core/any/trait.Any.html#method.downcast_ref_unchecked-2"]
row = 201
ConsistantLayout = [""]

[unsafe_fn."https://doc.rust-lang.org/core/any/trait.Any.html#method.downcast_mut_unchecked-2"]
row = 202
ConsistantLayout = [""]

[unsafe_fn."https://doc.rust-lang.org/core/cell/struct.RefCell.html#method.try_borrow_unguarded"]
row = 203
AliasingMutating = [""]

[unsafe_fn."https://doc.rust-lang.org/core/option/enum.Option.html#method.unwrap_unchecked"]
row = 204
Unreachable = [""]

[unsafe_fn."https://doc.rust-lang.org/core/pin/struct.Pin.html#method.new_unchecked"]
row = 205
Pinned = [""]

[unsafe_fn."https://doc.rust-lang.org/core/pin/struct.Pin.html#method.into_inner_unchecked"]
row = 206
Pinned = [""]

[unsafe_fn."https://doc.rust-lang.org/core/pin/struct.Pin.html#method.map_unchecked"]
row = 207
Pinned = [""]

[unsafe_fn."https://doc.rust-lang.org/core/pin/struct.Pin.html#method.get_unchecked_mut"]
row = 208
Pinned = [""]

[unsafe_fn."https://doc.rust-lang.org/core/pin/struct.Pin.html#method.map_unchecked_mut"]
row = 209
Pinned = [""]

[unsafe_fn."https://doc.rust-lang.org/core/sync/atomic/struct.AtomicBool.html#method.from_ptr"]
row = 210
Allocated = [""]
Initialized = [""]
Dereferencable = [""]
Aligned = [""]
ConsistantLayout = [""]
Thread = [""]
AliasingMutating = [""]
Outliving = [""]

[unsafe_fn."https://doc.rust-lang.org/core/sync/atomic/struct.AtomicU8.html#method.from_ptr"]
row = 210
Allocated = [""]
Initialized = [""]
Dereferencable = [""]
Aligned = [""]
ConsistantLayout = [""]
Thread = [""]
AliasingMutating = [""]
Outliving = [""]

[unsafe_fn."https://doc.rust-lang.org/core/sync/atomic/struct.AtomicU16.html#method.from_ptr"]
row = 210
Allocated = [""]
Initialized = [""]
Dereferencable = [""]
Aligned = [""]
ConsistantLayout = [""]
Thread = [""]
AliasingMutating = [""]
Outliving = [""]

[unsafe_fn."https://doc.rust-lang.org/core/sync/atomic/struct.AtomicU32.html#method.from_ptr"]
row = 210
Allocated = [""]
Initialized = [""]
Dereferencable = [""]
Aligned = [""]
ConsistantLayout = [""]
Thread = [""]
AliasingMutating = [""]
Outliving = [""]

[unsafe_fn."https://doc.rust-lang.org/core/sync/atomic/struct.AtomicU64.html#method.from_ptr"]
row = 210
Allocated = [""]
Initialized = [""]
Dereferencable = [""]
Aligned = [""]
ConsistantLayout = [""]
Thread = [""]
AliasingMutating = [""]
Outliving = [""]

[unsafe_fn."https://doc.rust-lang.org/core/sync/atomic/struct.AtomicUsize.html#method.from_ptr"]
row = 210
Allocated = [""]
Initialized = [""]
Dereferencable = [""]
Aligned = [""]
ConsistantLayout = [""]
Thread = [""]
AliasingMutating = [""]
Outliving = [""]

[unsafe_fn."https://doc.rust-lang.org/core/sync/atomic/struct.AtomicI8.html#method.from_ptr"]
row = 210
Allocated = [""]
Initialized = [""]
Dereferencable = [""]
Aligned = [""]
ConsistantLayout = [""]
Thread = [""]
AliasingMutating = [""]
Outliving = [""]

[unsafe_fn."https://doc.rust-lang.org/core/sync/atomic/struct.AtomicI16.html#method.from_ptr"]
row = 210
Allocated = [""]
Initialized = [""]
Dereferencable = [""]
Aligned = [""]
ConsistantLayout = [""]
Thread = [""]
AliasingMutating = [""]
Outliving = [""]

[unsafe_fn."https://doc.rust-lang.org/core/sync/atomic/struct.AtomicI32.html#method.from_ptr"]
row = 210
Allocated = [""]
Initialized = [""]
Dereferencable = [""]
Aligned = [""]
ConsistantLayout = [""]
Thread = [""]
AliasingMutating = [""]
Outliving = [""]

[unsafe_fn."https://doc.rust-lang.org/core/sync/atomic/struct.AtomicI64.html#method.from_ptr"]
row = 210
Allocated = [""]
Initialized = [""]
Dereferencable = [""]
Aligned = [""]
ConsistantLayout = [""]
Thread = [""]
AliasingMutating = [""]
Outliving = [""]

[unsafe_fn."https://doc.rust-lang.org/core/sync/atomic/struct.AtomicIsize.html#method.from_ptr"]
row = 210
Allocated = [""]
Initialized = [""]
Dereferencable = [""]
Aligned = [""]
ConsistantLayout = [""]
Thread = [""]
AliasingMutating = [""]
Outliving = [""]

[unsafe_fn."https://doc.rust-lang.org/core/sync/atomic/struct.AtomicPtr.html#method.from_ptr"]
row = 211
Allocated = [""]
Initialized = [""]
Dereferencable = [""]
Aligned = [""]
ConsistantLayout = [""]
Thread = [""]
AliasingMutating = [""]
Outliving = [""]

[unsafe_fn."https://doc.rust-lang.org/core/result/enum.Result.html#method.unwrap_unchecked"]
row = 212
Unreachable = [""]

[unsafe_fn."https://doc.rust-lang.org/core/result/enum.Result.html#method.unwrap_err_unchecked"]
row = 213
Unreachable = [""]

[unsafe_fn."https://doc.rust-lang.org/core/io/struct.BorrowedCursor.html#method.as_mut"]
row = 214
Initialized = [""]

[unsafe_fn."https://doc.rust-lang.org/core/io/struct.BorrowedCursor.html#method.advance"]
row = 215
Initialized = [""]

[unsafe_fn."https://doc.rust-lang.org/core/io/struct.BorrowedCursor.html#method.set_init"]
row = 216
Initialized = [""]

[unsafe_fn."https://doc.rust-lang.org/core/io/struct.BorrowedBuf.html#method.set_init"]
row = 217
Initialized = [""]

[unsafe_fn."https://doc.rust-lang.org/alloc/ffi/struct.CString.html#method.from_vec_unchecked"]
row = 218
Encoding = [""]

[unsafe_fn."https://doc.rust-lang.org/alloc/ffi/struct.CString.html#method.from_raw"]
row = 219
RelativeBound = [""]
Encoding = [""]
Allocated = [""]
ConsistantLayout = [""]
DualOwner = [""]

[unsafe_fn."https://doc.rust-lang.org/alloc/ffi/struct.CString.html#method.from_vec_with_nul_unchecked"]
row = 220
Encoding = [""]

[unsafe_fn."https://doc.rust-lang.org/alloc/vec/struct.Vec.html#method.from_raw_parts"]
row = 221
ConstBound = [""]
RelativeBound = [""]
Allocated = [""]
Initialized = [""]
Aligned = [""]
ConsistantLayout = [""]
DualOwner = [""]

[unsafe_fn."https://doc.rust-lang.org/alloc/vec/struct.Vec.html#method.from_raw_parts_in"]
row = 222
ConstBound = [""]
RelativeBound = [""]
Allocated = [""]
Initialized = [""]
Aligned = [""]
ConsistantLayout = [""]
DualOwner = [""]

[unsafe_fn."https://doc.rust-lang.org/alloc/vec/struct.Vec.html#method.set_len"]
row = 223
RelativeBound = [""]
Initialized = [""]
Leaked = [""]

[unsafe_fn."https://doc.rust-lang.org/alloc/boxed/struct.Box.html#method.assume_init"]
row = 224
Initialized = [""]

[unsafe_fn."https://doc.rust-lang.org/alloc/boxed/struct.Box.html#method.assume_init-1"]
row = 225
Initialized = [""]

[unsafe_fn."https://doc.rust-lang.org/alloc/boxed/struct.Box.html#method.from_raw"]
row = 226
Allocated = [""]
Aligned = [""]
ConsistantLayout = [""]
DualOwner = [""]

[unsafe_fn."https://doc.rust-lang.org/alloc/boxed/struct.Box.html#method.from_raw_in"]
row = 227
Allocated = [""]
Aligned = [""]
ConsistantLayout = [""]
DualOwner = [""]

[unsafe_fn."https://doc.rust-lang.org/alloc/boxed/struct.Box.html#method.downcast_unchecked"]
row = 228
ConsistantLayout = [""]

[unsafe_fn."https://doc.rust-lang.org/alloc/boxed/struct.Box.html#method.downcast_unchecked-1"]
row = 229
ConsistantLayout = [""]

[unsafe_fn."https://doc.rust-lang.org/alloc/boxed/struct.Box.html#method.downcast_unchecked-2"]
row = 230
ConsistantLayout = [""]

[unsafe_fn."https://doc.rust-lang.org/alloc/rc/struct.Rc.html#method.assume_init"]
row = 231
Initialized = [""]

[unsafe_fn."https://doc.rust-lang.org/alloc/rc/struct.Rc.html#method.assume_init-1"]
row = 232
Initialized = [""]

[unsafe_fn."https://doc.rust-lang.org/alloc/rc/struct.Rc.html#method.from_raw"]
row = 233
Allocated = [""]
Aligned = [""]
ConsistantLayout = [""]
DualOwner = [""]

[unsafe_fn."https://doc.rust-lang.org/alloc/rc/struct.Rc.html#method.from_raw_in"]
row = 234

[unsafe_fn."https://doc.rust-lang.org/alloc/rc/struct.Rc.html#method.increment_strong_count"]
row = 235
RelativeBound = [""]
Allocated = [""]
Initialized = [""]
ConsistantLayout = [""]

[unsafe_fn."https://doc.rust-lang.org/alloc/rc/struct.Rc.html#method.increment_strong_count_in"]
row = 236

[unsafe_fn."https://doc.rust-lang.org/alloc/rc/struct.Rc.html#method.decrement_strong_count"]
row = 237
RelativeBound = [""]
Allocated = [""]
Initialized = [""]
ConsistantLayout = [""]
Freed = [""]

[unsafe_fn."https://doc.rust-lang.org/alloc/rc/struct.Rc.html#method.decrement_strong_count_in"]
row = 238

[unsafe_fn."https://doc.rust-lang.org/alloc/rc/struct.Rc.html#method.get_mut_unchecked"]
row = 239
ConsistantLayout = [""]
AliasingMutating = [""]

[unsafe_fn."https://doc.rust-lang.org/alloc/rc/struct.Rc.html#method.downcast_unchecked"]
row = 240
ConsistantLayout = [""]

[unsafe_fn."https://doc.rust-lang.org/alloc/rc/struct.Weak.html#method.from_raw"]
row = 241
Allocated = [""]
ConsistantLayout = [""]

[unsafe_fn."https://doc.rust-lang.org/alloc/rc/struct.Weak.html#method.from_raw_in"]
row = 242

[unsafe_fn."https://doc.rust-lang.org/alloc/str/fn.from_boxed_utf8_unchecked.html"]
row = 243
Encoding = [""]

[unsafe_fn."https://doc.rust-lang.org/alloc/string/struct.String.html#method.from_raw_parts"]
row = 244
RelativeBound = [""]
Encoding = [""]
Allocated = [""]
Initialized = [""]
Aligned = [""]
ConsistantLayout = [""]
DualOwner = [""]

[unsafe_fn."https://doc.rust-lang.org/alloc/string/struct.String.html#method.from_utf8_unchecked"]
row = 245
Encoding = [""]

[unsafe_fn."https://doc.rust-lang.org/alloc/string/struct.String.html#method.as_mut_vec"]
row = 246
Encoding = [""]

[unsafe_fn."https://doc.rust-lang.org/alloc/sync/struct.Arc.html#method.assume_init"]
row = 247
Initialized = [""]

[unsafe_fn."https://doc.rust-lang.org/alloc/sync/struct.Arc.html#method.assume_init-1"]
row = 248
Initialized = [""]

[unsafe_fn."https://doc.rust-lang.org/alloc/sync/struct.Arc.html#method.from_raw"]
row = 249
Allocated = [""]
Aligned = [""]
ConsistantLayout = [""]
DualOwner = [""]

[unsafe_fn."https://doc.rust-lang.org/alloc/sync/struct.Arc.html#method.from_raw_in"]
row = 250

[unsafe_fn."https://doc.rust-lang.org/alloc/sync/struct.Arc.html#method.increment_strong_count"]
row = 251
RelativeBound = [""]
Allocated = [""]
Initialized = [""]
ConsistantLayout = [""]

[unsafe_fn."https://doc.rust-lang.org/alloc/sync/struct.Arc.html#method.increment_strong_count_in"]
row = 252

[unsafe_fn."https://doc.rust-lang.org/alloc/sync/struct.Arc.html#method.decrement_strong_count"]
row = 253
RelativeBound = [""]
Allocated = [""]
Initialized = [""]
ConsistantLayout = [""]
Freed = [""]

[unsafe_fn."https://doc.rust-lang.org/alloc/sync/struct.Arc.html#method.decrement_strong_count_in"]
row = 254

[unsafe_fn."https://doc.rust-lang.org/alloc/sync/struct.Arc.html#method.get_mut_unchecked"]
row = 255
ConsistantLayout = [""]
AliasingMutating = [""]

[unsafe_fn."https://doc.rust-lang.org/alloc/sync/struct.Arc.html#method.downcast_unchecked"]
row = 256
ConsistantLayout = [""]

[unsafe_fn."https://doc.rust-lang.org/alloc/sync/struct.Weak.html#method.from_raw"]
row = 257
Allocated = [""]
ConsistantLayout = [""]

[unsafe_fn."https://doc.rust-lang.org/alloc/sync/struct.Weak.html#method.from_raw_in"]
row = 258

[unsafe_fn."https://doc.rust-lang.org/std/collections/hash_map/struct.HashMap.html#method.get_many_unchecked_mut"]
row = 259
RelativeBound = [""]

[unsafe_fn."https://doc.rust-lang.org/std/os/fd/trait.FromRawFd.html#tymethod.from_raw_fd"]
row = 260
SystemIO = [""]

[unsafe_fn."https://doc.rust-lang.org/std/net/struct.TcpStream.html#method.from_raw_fd"]
row = 261
SystemIO = [""]

[unsafe_fn."https://doc.rust-lang.org/std/net/struct.TcpListener.html#method.from_raw_fd"]
row = 261
SystemIO = [""]

[unsafe_fn."https://doc.rust-lang.org/std/net/struct.UdpSocket.html#method.from_raw_fd"]
row = 261
SystemIO = [""]

[unsafe_fn."https://doc.rust-lang.org/std/os/fd/struct.BorrowedFd.html#method.borrow_raw"]
row = 262
ConstBound = [""]
SystemIO = [""]

[unsafe_fn."https://doc.rust-lang.org/std/os/fd/struct.OwnedFd.html#method.from_raw_fd"]
row = 263
SystemIO = [""]

[unsafe_fn."https://doc.rust-lang.org/std/os/fd/type.RawFd.html#method.from_raw_fd"]
row = 264
SystemIO = [""]

[unsafe_fn."https://doc.rust-lang.org/std/fs/struct.File.html#method.from_raw_fd"]
row = 265
SystemIO = [""]

[unsafe_fn."https://doc.rust-lang.org/std/os/linux/process/struct.PidFd.html#method.from_raw_fd"]
row = 266
SystemIO = [""]

[unsafe_fn."https://doc.rust-lang.org/std/os/unix/net/struct.UnixDatagram.html#method.from_raw_fd"]
row = 267
SystemIO = [""]

[unsafe_fn."https://doc.rust-lang.org/std/os/unix/net/struct.UnixListener.html#method.from_raw_fd"]
row = 268
SystemIO = [""]

[unsafe_fn."https://doc.rust-lang.org/std/os/unix/net/struct.UnixStream.html#method.from_raw_fd"]
row = 269
SystemIO = [""]

[unsafe_fn."https://doc.rust-lang.org/std/process/struct.Stdio.html#method.from_raw_fd"]
row = 270
SystemIO = [""]

[unsafe_fn."https://doc.rust-lang.org/std/os/windows/io/struct.BorrowedHandle.html#method.borrow_raw"]
row = 271
SystemIO = [""]

[unsafe_fn."https://doc.rust-lang.org/std/os/windows/io/struct.OwnedHandle.html#method.from_raw_handle"]
row = 272
SystemIO = [""]

[unsafe_fn."https://doc.rust-lang.org/std/os/windows/io/struct.HandleOrNull.html#method.from_raw_handle"]
row = 273
SystemIO = [""]

[unsafe_fn."https://doc.rust-lang.org/std/os/windows/io/struct.HandleOrInvalid.html#method.from_raw_handle"]
row = 274
SystemIO = [""]

[unsafe_fn."https://doc.rust-lang.org/std/os/windows/io/trait.FromRawHandle.html#tymethod.from_raw_handle"]
row = 275
SystemIO = [""]

[unsafe_fn."https://doc.rust-lang.org/std/fs/struct.File.html#method.from_raw_handle"]
row = 276
SystemIO = [""]

[unsafe_fn."https://doc.rust-lang.org/std/os/windows/io/trait.FromRawSocket.html#tymethod.from_raw_socket"]
row = 277
SystemIO = [""]

[unsafe_fn."https://doc.rust-lang.org/std/net/struct.TcpStream.html#method.from_raw_socket"]
row = 278
SystemIO = [""]

[unsafe_fn."https://doc.rust-lang.org/std/net/struct.TcpListener.html#method.from_raw_socket"]
row = 279
SystemIO = [""]

[unsafe_fn."https://doc.rust-lang.org/std/net/struct.UdpSocket.html#method.from_raw_socket"]
row = 280
SystemIO = [""]

[unsafe_fn."https://doc.rust-lang.org/std/os/windows/io/struct.BorrowedSocket.html#method.borrow_raw"]
row = 281
ConstBound = [""]
SystemIO = [""]

[unsafe_fn."https://doc.rust-lang.org/std/os/windows/io/struct.OwnedSocket.html#method.from_raw_socket"]
row = 282
SystemIO = [""]

[unsafe_fn."https://doc.rust-lang.org/std/process/struct.Stdio.html#method.from_raw_handle"]
row = 283
SystemIO = [""]

[unsafe_fn."https://doc.rust-lang.org/std/alloc/struct.System.html#method.alloc"]
row = 284
EST = [""]
Untyped = [""]
Freed = [""]

[unsafe_fn."https://doc.rust-lang.org/std/alloc/struct.System.html#method.alloc_zeroed"]
row = 285
EST = [""]
Freed = [""]

[unsafe_fn."https://doc.rust-lang.org/std/alloc/struct.System.html#method.dealloc"]
row = 286
Allocated = [""]
ConsistantLayout = [""]

[unsafe_fn."https://doc.rust-lang.org/std/alloc/struct.System.html#method.realloc"]
row = 287
ConstBound = [""]
Allocated = [""]
ConsistantLayout = [""]
EST = [""]
Freed = [""]

[unsafe_fn."https://doc.rust-lang.org/std/thread/struct.Builder.html#method.spawn_unchecked"]
row = 288
Outliving = [""]

[unsafe_fn."https://doc.rust-lang.org/core/intrinsics/fn.assume.html"]
row = 289
ConstBound = [""]
Unreachable = [""]

[unsafe_fn."https://doc.rust-lang.org/core/intrinsics/fn.const_allocate.html"]
row = 291
ConstBound = [""]
EST = [""]
Untyped = [""]
Freed = [""]

[unsafe_fn."https://doc.rust-lang.org/core/intrinsics/fn.const_deallocate.html"]
row = 292
Allocated = [""]
ConsistantLayout = [""]

[unsafe_fn."https://doc.rust-lang.org/core/intrinsics/fn.const_eval_select.html"]
row = 293
Unreachable = [""]

[unsafe_fn."https://doc.rust-lang.org/core/intrinsics/fn.ctlz_nonzero.html"]
row = 294
ConstBound = [""]

[unsafe_fn."https://doc.rust-lang.org/core/intrinsics/fn.cttz_nonzero.html"]
row = 295
ConstBound = [""]

[unsafe_fn."https://doc.rust-lang.org/core/intrinsics/fn.exact_div.html"]
row = 296
ConstBound = [""]

[unsafe_fn."https://doc.rust-lang.org/core/intrinsics/fn.fadd_fast.html"]
row = 297
ConstBound = [""]

[unsafe_fn."https://doc.rust-lang.org/core/intrinsics/fn.fdiv_fast.html"]
row = 298
ConstBound = [""]

[unsafe_fn."https://doc.rust-lang.org/core/intrinsics/fn.fmul_fast.html"]
row = 299
ConstBound = [""]

[unsafe_fn."https://doc.rust-lang.org/core/intrinsics/fn.frem_fast.html"]
row = 300
ConstBound = [""]

[unsafe_fn."https://doc.rust-lang.org/core/intrinsics/fn.fsub_fast.html"]
row = 301
ConstBound = [""]

[unsafe_fn."https://doc.rust-lang.org/core/intrinsics/fn.ptr_offset_from.html"]
row = 311
self.ConstBound = ["The distance between the pointers, in bytes, cannot overflow an `isize`."]
self.RelativeBound = ["The distance between the pointers, in bytes, must be an exact multiple of the size of `T`."]
self.Allocated = [""]
self.Dereferencable = [
    "`ptr` must be either in bounds or one byte past the end of the same allocated object.",
    "Both pointers must be derived from a pointer to the same object."
]
self.ConsistantLayout = [""]
self.EST = ["This function panics if `T` is a Zero-Sized Type (ZST)."]
origin.Allocated = [""]
origin.Dereferencable = ["`base` must be either in bounds or one byte past the end of the same allocated object."]
origin.ConsistantLayout = [""]

[unsafe_fn."https://doc.rust-lang.org/core/intrinsics/fn.ptr_offset_from_unsigned.html"]
row = 312
ptr.ConstBound = ["The distance between the pointers, in bytes, cannot overflow an `isize`."]
ptr.RelativeBound = [
    "The distance between the pointers, in bytes, must be an exact multiple of the size of `T`.",
    "The distance between the pointers must be non-negative (`ptr` >= `base`)."
]
ptr.Allocated = [""]
ptr.Dereferencable = [
    "`ptr` must be either in bounds or one byte past the end of the same allocated object.",
    "Both pointers must be derived from a pointer to the same object."
]
ptr.ConsistantLayout = [""]
ptr.EST = ["This function panics if `T` is a Zero-Sized Type (ZST)."]
base.Allocated = [""]
base.Dereferencable = ["`base` must be either in bounds or one byte past the end of the same allocated object."]
base.ConsistantLayout = [""]

[unsafe_fn."https://doc.rust-lang.org/core/intrinsics/fn.raw_eq.html"]
row = 313
Initialized = [""]
Aligned = [""]

[unsafe_fn."https://doc.rust-lang.org/core/intrinsics/fn.try.html"]
row = 317
Allocated = [""]
Initialized = [""]
Dereferencable = [""]
Unreachable = [""]

[unsafe_fn."https://doc.rust-lang.org/core/intrinsics/fn.unaligned_volatile_load.html"]
row = 318
src.Allocated = [
    "A null pointer is never valid, not even for accesses of size zero.",
    "Even for operations of size zero, the pointer must not be pointing to deallocated memory."
]
src.Initialized = ["`src` must point to a properly initialized value of type `T`."]
src.Dereferencable = ["The memory range of the given size starting at the pointer must all be within the bounds of a single allocated object."]
src.ConsistantLayout = [""]
retval.DualOwner = [
    "If `T` is not `Copy`, using both the returned value and the value at `src` can violate memory safety. Note that assigning to `src` counts as a use because it will attempt to drop the value at `src`.",
    "However, storing non-`Copy` types in volatile memory is almost certainly incorrect."
]

[unsafe_fn."https://doc.rust-lang.org/core/intrinsics/fn.unaligned_volatile_store.html"]
row = 319
dst.Allocated = [
    "A null pointer is never valid, not even for accesses of size zero.",
    "Even for operations of size zero, the pointer must not be pointing to deallocated memory."
]
dst.Dereferencable = ["The memory range of the given size starting at the pointer must all be within the bounds of a single allocated object."]
dst.ConsistantLayout = [""]
dst.Leaked = ["This is safe, but it could leak allocations or resources, so care should be taken not to overwrite an object that should be dropped."]

[unsafe_fn."https://doc.rust-lang.org/core/intrinsics/fn.unchecked_add.html"]
row = 320
ConstBound = [""]

[unsafe_fn."https://doc.rust-lang.org/core/intrinsics/fn.unchecked_mul.html"]
row = 321
ConstBound = [""]

[unsafe_fn."https://doc.rust-lang.org/core/intrinsics/fn.unchecked_sub.html"]
row = 322
ConstBound = [""]

[unsafe_fn."https://doc.rust-lang.org/core/intrinsics/fn.volatile_copy_memory.html"]
row = 323
src.Allocated = [
    "A null pointer is never valid, not even for accesses of size zero.",
    "Even for operations of size zero, the pointer must not be pointing to deallocated memory."
]
src.Dereferencable = ["The memory range of the given size (`count * size_of::<T>()` bytes) starting at the pointer must all be within the bounds of a single allocated object."]
src.Aligned = ["`src` must be properly aligned."]
src.ConsistantLayout = [""]
dst.Allocated = [
    "A null pointer is never valid, not even for accesses of size zero.",
    "Even for operations of size zero, the pointer must not be pointing to deallocated memory."
]
dst.Dereferencable = ["The memory range of the given size (`count * size_of::<T>()` bytes) starting at the pointer must all be within the bounds of a single allocated object."]
dst.Aligned = ["`dst` must be properly aligned."]
dst.ConsistantLayout = [""]
dst.DualOwner = ["If `T` is not `Copy`, using both the values in the region beginning at `self` and the region beginning at `*dst` can violate memory safety. Note that assigning to `*dst` counts as a use because it will attempt to drop the value at `*dst`."]
dst.Untyped = ["The copy is untyped in the sense that data may be uninitialized or otherwise violate the requirements of `T`."]
dst.Leaked = [""]

[unsafe_fn."https://doc.rust-lang.org/core/intrinsics/fn.volatile_copy_nonoverlapping_memory.html"]
row = 324
src.Allocated = [
    "A null pointer is never valid, not even for accesses of size zero.",
    "Even for operations of size zero, the pointer must not be pointing to deallocated memory."
]
src.Dereferencable = [
    "The memory range of the given size (`count * size_of::<T>()` bytes) starting at the pointer must all be within the bounds of a single allocated object.",
    "The region of memory beginning at `src` with a size of `count * size_of::<T>()` bytes must not overlap with the region of memory beginning at `dst` with the same size."
]
src.Aligned = ["`src` must be properly aligned."]
src.ConsistantLayout = [""]
dst.Allocated = [
    "A null pointer is never valid, not even for accesses of size zero.",
    "Even for operations of size zero, the pointer must not be pointing to deallocated memory."
]
dst.Dereferencable = [
    "The memory range of the given size (`count * size_of::<T>()` bytes) starting at the pointer must all be within the bounds of a single allocated object.",
    "The region of memory beginning at `src` with a size of `count * size_of::<T>()` bytes must not overlap with the region of memory beginning at `dst` with the same size."
]
dst.Aligned = ["`dst` must be properly aligned."]
dst.ConsistantLayout = [""]
dst.DualOwner = ["If `T` is not `Copy`, using both the values in the region beginning at `self` and the region beginning at `*dst` can violate memory safety. Note that assigning to `*dst` counts as a use because it will attempt to drop the value at `*dst`."]
dst.Untyped = ["The copy is untyped in the sense that data may be uninitialized or otherwise violate the requirements of `T`."]
dst.Leaked = [""]

[unsafe_fn."https://doc.rust-lang.org/core/intrinsics/fn.volatile_set_memory.html"]
row = 325
dst.Allocated = [
    "A null pointer is never valid, not even for accesses of size zero.",
    "Even for operations of size zero, the pointer must not be pointing to deallocated memory."
]
dst.Dereferencable = ["The memory range of the given size (`count * size_of::<T>()` bytes) starting at the pointer must all be within the bounds of a single allocated object."]
dst.Aligned = ["`dst` must be properly aligned ('min_align_of::<T>()')."]
dst.ConsistantLayout = [""]
dst.Untyped = ["Additionally, note that changing `dst` in this way can easily lead to undefined behavior (UB) later if the written bytes are not a valid representation of some `T`."]
dst.Leaked = [""]

[unsafe_fn."https://doc.rust-lang.org/core/intrinsics/fn.vtable_align.html"]
row = 326
Allocated = [""]
EST = [""]

[unsafe_fn."https://doc.rust-lang.org/core/intrinsics/fn.vtable_size.html"]
row = 327
Allocated = [""]
EST = [""]

[unsafe_fn."https://doc.rust-lang.org/core/intrinsics/fn.copy.html"]
row = 328
src.Allocated = [
    "A null pointer is never valid, not even for accesses of size zero.",
    "Even for operations of size zero, the pointer must not be pointing to deallocated memory."
]
src.Dereferencable = ["The memory range of the given size (`count * size_of::<T>()` bytes) starting at the pointer must all be within the bounds of a single allocated object."]
src.Aligned = ["`src` must be properly aligned."]
src.ConsistantLayout = [""]
dst.Allocated = [
    "A null pointer is never valid, not even for accesses of size zero.",
    "Even for operations of size zero, the pointer must not be pointing to deallocated memory."
]
dst.Dereferencable = ["The memory range of the given size (`count * size_of::<T>()` bytes) starting at the pointer must all be within the bounds of a single allocated object."]
dst.Aligned = ["`dst` must be properly aligned."]
dst.ConsistantLayout = [""]
dst.DualOwner = ["If `T` is not `Copy`, using both the values in the region beginning at `self` and the region beginning at `*dst` can violate memory safety. Note that assigning to `*dst` counts as a use because it will attempt to drop the value at `*dst`."]
dst.Untyped = ["The copy is untyped in the sense that data may be uninitialized or otherwise violate the requirements of `T`."]
dst.Leaked = [""]

[unsafe_fn."https://doc.rust-lang.org/core/intrinsics/fn.copy_nonoverlapping.html"]
row = 329
src.Allocated = [
    "A null pointer is never valid, not even for accesses of size zero.",
    "Even for operations of size zero, the pointer must not be pointing to deallocated memory."
]
src.Dereferencable = [
    "The memory range of the given size (`count * size_of::<T>()` bytes) starting at the pointer must all be within the bounds of a single allocated object.",
    "The region of memory beginning at `src` with a size of `count * size_of::<T>()` bytes must not overlap with the region of memory beginning at `dst` with the same size."
]
src.Aligned = ["`src` must be properly aligned."]
src.ConsistantLayout = [""]
dst.Allocated = [
    "A null pointer is never valid, not even for accesses of size zero.",
    "Even for operations of size zero, the pointer must not be pointing to deallocated memory."
]
dst.Dereferencable = [
    "The memory range of the given size (`count * size_of::<T>()` bytes) starting at the pointer must all be within the bounds of a single allocated object.",
    "The region of memory beginning at `src` with a size of `count * size_of::<T>()` bytes must not overlap with the region of memory beginning at `dst` with the same size."
]
dst.Aligned = ["`dst` must be properly aligned."]
dst.ConsistantLayout = [""]
dst.DualOwner = ["If `T` is not `Copy`, using both the values in the region beginning at `self` and the region beginning at `*dst` can violate memory safety. Note that assigning to `*dst` counts as a use because it will attempt to drop the value at `*dst`."]
dst.Untyped = ["The copy is untyped in the sense that data may be uninitialized or otherwise violate the requirements of `T`."]
dst.Leaked = [""]

[unsafe_fn."https://doc.rust-lang.org/core/intrinsics/fn.drop_in_place.html"]
row = 330
to_drop.Allocated = [
    "`to_drop` must be nonnull, even if T has size 0.",
    "Even for operations of size zero, the pointer must not be pointing to deallocated memory."
]
to_drop.Initialized = ["The value `to_drop` points to must be valid for dropping, which may mean it must uphold additional invariants. These invariants depend on the type of the value being dropped."]
to_drop.Dereferencable = ["The memory range of the given size starting at the pointer must all be within the bounds of a single allocated object."]
to_drop.Aligned = [
    "`to_drop` must be properly aligned, even if `T` has size 0.",
    "Unaligned values cannot be dropped in place, they must be copied to an aligned location first using `ptr::read_unaligned`."
]
to_drop.ConsistantLayout = [""]
to_drop.Freed = ["Executes the destructor (if any) of the pointed-to value."]

[unsafe_fn."https://doc.rust-lang.org/core/intrinsics/fn.transmute.html"]
row = 331
RelativeBound = [""]
Initialized = [""]
Aligned = [""]
ConsistantLayout = [""]
AliasingMutating = [""]
Outliving = [""]

[unsafe_fn."https://doc.rust-lang.org/core/intrinsics/fn.write_bytes.html"]
row = 332
dst.Allocated = [
    "A null pointer is never valid, not even for accesses of size zero.",
    "Even for operations of size zero, the pointer must not be pointing to deallocated memory."
]
dst.Dereferencable = ["The memory range of the given size (`count * size_of::<T>()` bytes) starting at the pointer must all be within the bounds of a single allocated object."]
dst.Aligned = ["`dst` must be properly aligned."]
dst.ConsistantLayout = [""]
dst.Untyped = ["Additionally, note that changing `dst` in this way can easily lead to undefined behavior (UB) later if the written bytes are not a valid representation of some `T`."]
dst.Leaked = [""]